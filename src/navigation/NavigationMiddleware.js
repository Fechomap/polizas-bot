const { getInstance: getNavigationManager } = require('./NavigationManager');
const logger = require('../utils/logger');

/**
 * üîÑ Navigation Middleware - Navegaci√≥n Persistente Autom√°tica
 *
 * Middleware que autom√°ticamente agrega navegaci√≥n persistente
 * a todas las respuestas del bot que no la manejen expl√≠citamente
 */

/**
 * Middleware principal de navegaci√≥n
 * Se ejecuta despu√©s de cada comando/acci√≥n para agregar navegaci√≥n
 */
const navigationMiddleware = async (ctx, next) => {
    try {
        // Inyectar NavigationManager en el contexto
        ctx.navManager = getNavigationManager();

        // Marcar que navegaci√≥n no ha sido manejada
        ctx.navigationHandled = false;

        // Ejecutar el siguiente middleware/handler
        await next();

        // Si la navegaci√≥n no fue manejada expl√≠citamente, agregarla
        if (!ctx.navigationHandled && ctx.from?.id) {
            await addAutomaticNavigation(ctx);
        }
    } catch (error) {
        logger.error('Error en navigation middleware:', error);
        // Continuar sin navegaci√≥n en caso de error
    }
};

/**
 * üîÑ Agrega navegaci√≥n autom√°tica si no se manej√≥ expl√≠citamente
 * @param {Object} ctx - Contexto de Telegraf
 */
async function addAutomaticNavigation(ctx) {
    try {
        const userId = ctx.from.id.toString();
        const navManager = ctx.navManager;

        // Solo agregar navegaci√≥n si fue una interacci√≥n que esperamos respuesta
        if (!shouldAddNavigation(ctx)) {
            return;
        }

        // Obtener el men√∫ principal como fallback
        const mainMenu = navManager.getMainMenu(userId);

        // Enviar men√∫ como mensaje separado si no hay mensaje previo para editar
        if (!ctx.callbackQuery) {
            await ctx.reply('üß≠ Navegaci√≥n disponible:', {
                parse_mode: 'Markdown',
                ...mainMenu.markup
            });
        }

        logger.debug('Navegaci√≥n autom√°tica agregada', {
            userId,
            hasCallbackQuery: !!ctx.callbackQuery,
            chatId: ctx.chat?.id
        });
    } catch (error) {
        logger.error('Error agregando navegaci√≥n autom√°tica:', error);
    }
}

/**
 * üéØ Determina si se debe agregar navegaci√≥n autom√°tica
 * @param {Object} ctx - Contexto de Telegraf
 * @returns {boolean} Si debe agregar navegaci√≥n
 */
function shouldAddNavigation(ctx) {
    // No agregar navegaci√≥n en estos casos:

    // 1. Si es un comando de start (ya tiene su propio men√∫)
    if (ctx.message?.text?.startsWith('/start')) {
        return false;
    }

    // 2. Si es una respuesta a un callback ya manejado
    if (ctx.callbackQuery && ctx.answered) {
        return false;
    }

    // 3. Si es un mensaje de error (ya manejado)
    if (ctx.state?.isError) {
        return false;
    }

    // 4. Si es parte de un flujo activo (BD AUTOS, Admin, etc.)
    if (isInActiveFlow(ctx)) {
        return false;
    }

    return true;
}

/**
 * üîç Verifica si el usuario est√° en un flujo activo
 * @param {Object} ctx - Contexto de Telegraf
 * @returns {boolean} Si est√° en flujo activo
 */
function isInActiveFlow(ctx) {
    try {
        const userId = ctx.from.id.toString();
        const chatId = ctx.chat?.id;

        if (!chatId) return false;

        // Verificar flujos BD AUTOS
        const {
            VehicleRegistrationHandler
        } = require('../comandos/comandos/VehicleRegistrationHandler');
        const { PolicyAssignmentHandler } = require('../comandos/comandos/PolicyAssignmentHandler');

        const threadId = ctx.message?.message_thread_id || null;

        if (VehicleRegistrationHandler?.tieneRegistroEnProceso?.(userId, chatId, threadId)) {
            return true;
        }

        if (PolicyAssignmentHandler?.tieneAsignacionEnProceso?.(userId, chatId, threadId)) {
            return true;
        }

        // Verificar flujos Admin
        const AdminStateManager = require('../admin/utils/adminStates');
        if (AdminStateManager?.hasActiveState?.(userId, chatId)) {
            return true;
        }

        return false;
    } catch (error) {
        logger.debug('Error verificando flujos activos:', error);
        return false; // En caso de error, permitir navegaci√≥n
    }
}

/**
 * üéõÔ∏è Funci√≥n helper para marcar navegaci√≥n como manejada
 * @param {Object} ctx - Contexto de Telegraf
 */
function markNavigationHandled(ctx) {
    if (ctx) {
        ctx.navigationHandled = true;
    }
}

/**
 * üß≠ Agrega navegaci√≥n persistente a respuesta espec√≠fica
 * @param {Object} ctx - Contexto de Telegraf
 * @param {string} text - Texto del mensaje
 * @param {Object} options - Opciones adicionales
 * @returns {Object} Opciones con navegaci√≥n agregada
 */
function addNavigationToResponse(ctx, text, options = {}) {
    try {
        const userId = ctx.from?.id?.toString();
        if (!userId || !ctx.navManager) {
            return { text, ...options };
        }

        const navManager = ctx.navManager;
        const response = navManager.addPersistentNavigation(text, userId, options);

        // Marcar como manejada
        markNavigationHandled(ctx);

        return {
            ...options,
            ...response.markup,
            parse_mode: response.parseMode
        };
    } catch (error) {
        logger.error('Error agregando navegaci√≥n a respuesta:', error);
        return { text, ...options };
    }
}

/**
 * üìä Obtiene estad√≠sticas del middleware
 * @returns {Object} Estad√≠sticas de uso
 */
function getMiddlewareStats() {
    const navManager = getNavigationManager();
    return {
        ...navManager.getNavigationStats(),
        middlewareVersion: '1.0.0',
        lastUpdate: new Date().toISOString()
    };
}

module.exports = {
    navigationMiddleware,
    markNavigationHandled,
    addNavigationToResponse,
    getMiddlewareStats,
    isInActiveFlow,
    shouldAddNavigation
};
