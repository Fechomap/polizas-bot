const VehicleController = require('../../controllers/vehicleController');
const policyController = require('../../controllers/policyController');
const { getMainKeyboard } = require('../teclados');

/**
 * Estados del flujo de asignaci√≥n de p√≥lizas
 */
const ESTADOS_ASIGNACION = {
    SELECCIONANDO_VEHICULO: 'seleccionando_vehiculo',
    ESPERANDO_NUMERO_POLIZA: 'esperando_numero_poliza',
    ESPERANDO_ASEGURADORA: 'esperando_aseguradora',
    ESPERANDO_AGENTE: 'esperando_agente',
    ESPERANDO_FECHA_EMISION: 'esperando_fecha_emision',
    ESPERANDO_FECHA_FIN: 'esperando_fecha_fin',
    ESPERANDO_PAGOS: 'esperando_pagos',
    ESPERANDO_PDF: 'esperando_pdf',
    COMPLETADO: 'completado'
};

/**
 * Almacena temporalmente los datos de asignaci√≥n en proceso
 */
const asignacionesEnProceso = new Map();

/**
 * Handler para la asignaci√≥n de p√≥lizas a veh√≠culos
 */
class PolicyAssignmentHandler {

    /**
   * Muestra los veh√≠culos disponibles para asegurar
   */
    static async mostrarVehiculosDisponibles(bot, chatId, userId, pagina = 1) {
        try {
            const resultado = await VehicleController.getVehiculosSinPoliza(10, pagina);

            if (!resultado.success) {
                await bot.telegram.sendMessage(chatId, `‚ùå Error: ${resultado.error}`);
                return false;
            }

            if (resultado.vehiculos.length === 0) {
                await bot.telegram.sendMessage(chatId,
                    'üìã *NO HAY VEH√çCULOS DISPONIBLES*\n\n' +
          'No se encontraron veh√≠culos sin p√≥liza para asegurar.\n' +
          'Solicita al equipo OBD que registre m√°s veh√≠culos.',
                    {
                        parse_mode: 'Markdown',
                        reply_markup: getMainKeyboard()
                    }
                );
                return true;
            }

            let mensaje = 'üöó *VEH√çCULOS DISPONIBLES PARA ASEGURAR*\n\n';
            mensaje += `üìä P√°gina ${resultado.pagination.pagina} de ${resultado.pagination.totalPaginas}\n`;
            mensaje += `üìà Total: ${resultado.pagination.total} veh√≠culos\n\n`;

            const botones = [];

            resultado.vehiculos.forEach((vehiculo, index) => {
                const numero = (pagina - 1) * 10 + index + 1;
                mensaje += `*${numero}.* üöó ${vehiculo.marca} ${vehiculo.submarca} ${vehiculo.a√±o}\n`;
                mensaje += `   üé® Color: ${vehiculo.color}\n`;
                mensaje += `   üî¢ Serie: ${vehiculo.serie}\n`;
                mensaje += `   üöô Placas: ${vehiculo.placas || 'Sin placas'}\n`;
                mensaje += `   üë§ Titular: ${vehiculo.titularTemporal}\n`;
                mensaje += `   üìÖ Registrado: ${new Date(vehiculo.createdAt).toLocaleDateString('es-MX')}\n\n`;

                // Bot√≥n para seleccionar este veh√≠culo
                botones.push([{
                    text: `${numero}. ${vehiculo.marca} ${vehiculo.submarca}`,
                    callback_data: `asignar_${vehiculo._id}`
                }]);
            });

            // Botones de navegaci√≥n
            const navegacion = [];
            if (resultado.pagination.pagina > 1) {
                navegacion.push({
                    text: '‚¨ÖÔ∏è Anterior',
                    callback_data: `vehiculos_pag_${pagina - 1}`
                });
            }
            if (resultado.pagination.pagina < resultado.pagination.totalPaginas) {
                navegacion.push({
                    text: 'Siguiente ‚û°Ô∏è',
                    callback_data: `vehiculos_pag_${pagina + 1}`
                });
            }
            if (navegacion.length > 0) {
                botones.push(navegacion);
            }

            // Botones adicionales
            botones.push([
                { text: 'üîç Buscar Veh√≠culo', callback_data: 'buscar_vehiculo' },
                { text: 'üìä Estad√≠sticas', callback_data: 'stats_vehiculos' }
            ]);
            botones.push([
                { text: 'üè† Men√∫ Principal', callback_data: 'menu_principal' }
            ]);

            await bot.telegram.sendMessage(chatId, mensaje, {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: botones
                }
            });

            return true;

        } catch (error) {
            console.error('Error mostrando veh√≠culos disponibles:', error);
            await bot.telegram.sendMessage(chatId, '‚ùå Error al consultar veh√≠culos disponibles.');
            return false;
        }
    }

    /**
   * Inicia el proceso de asignaci√≥n de p√≥liza a un veh√≠culo espec√≠fico
   */
    static async iniciarAsignacion(bot, chatId, userId, vehicleId) {
        try {
            // Buscar el veh√≠culo directamente por ID
            const Vehicle = require('../../models/vehicle');
            let vehiculo;
            
            try {
                vehiculo = await Vehicle.findById(vehicleId);
                if (!vehiculo) {
                    await bot.telegram.sendMessage(chatId, '‚ùå Veh√≠culo no encontrado.');
                    return false;
                }
            } catch (error) {
                // Si falla por ID, intentar buscar por serie o placas
                const vehicle = await VehicleController.buscarVehiculo(vehicleId);
                if (!vehicle.success || !vehicle.vehiculo) {
                    await bot.telegram.sendMessage(chatId, '‚ùå Veh√≠culo no encontrado.');
                    return false;
                }
                vehiculo = vehicle.vehiculo;
            }

            if (vehiculo.estado !== 'SIN_POLIZA') {
                await bot.telegram.sendMessage(chatId,
                    '‚ùå Este veh√≠culo ya tiene p√≥liza asignada o no est√° disponible.\n' +
          `Estado actual: ${vehiculo.estado}`
                );
                return false;
            }

            // Limpiar cualquier asignaci√≥n previa para este usuario
            asignacionesEnProceso.delete(userId);

            // Mostrar resumen del veh√≠culo seleccionado
            const mensaje = 'üöó *VEH√çCULO SELECCIONADO*\n\n' +
        `*${vehiculo.marca} ${vehiculo.submarca} ${vehiculo.a√±o}*\n` +
        `üé® Color: ${vehiculo.color}\n` +
        `üî¢ Serie: ${vehiculo.serie}\n` +
        `üöô Placas: ${vehiculo.placas || 'Sin placas'}\n\n` +
        '*Datos temporales del titular:*\n' +
        `üë§ ${vehiculo.titularTemporal}\n` +
        `üÜî RFC: ${vehiculo.rfcTemporal}\n` +
        `üì± ${vehiculo.telefonoTemporal}\n\n` +
        'üíº *INICIAR ASIGNACI√ìN DE P√ìLIZA*\n\n' +
        '*Paso 1/7:* Ingresa el *n√∫mero de p√≥liza*\n' +
        'üìù Ejemplo: POL-2024-001234';

            await bot.telegram.sendMessage(chatId, mensaje, {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [[
                        { text: '‚ùå Cancelar', callback_data: 'poliza_cancelar' }
                    ]]
                }
            });

            // Inicializar el estado de asignaci√≥n
            asignacionesEnProceso.set(userId, {
                estado: ESTADOS_ASIGNACION.ESPERANDO_NUMERO_POLIZA,
                chatId: chatId,
                vehiculo: vehiculo,
                datosPoliza: {},
                iniciado: new Date()
            });

            return true;

        } catch (error) {
            console.error('Error iniciando asignaci√≥n:', error);
            await bot.telegram.sendMessage(chatId, '‚ùå Error al iniciar la asignaci√≥n de p√≥liza.');
            return false;
        }
    }

    /**
   * Procesa los mensajes durante el flujo de asignaci√≥n
   */
    static async procesarMensaje(bot, msg, userId) {
        const chatId = msg.chat.id;
        const texto = msg.text?.trim();

        const asignacion = asignacionesEnProceso.get(userId);
        if (!asignacion) {
            return false; // No hay asignaci√≥n en proceso para este usuario
        }

        // La cancelaci√≥n ahora se maneja via callback_data en BaseAutosCommand

        try {
            switch (asignacion.estado) {
            case ESTADOS_ASIGNACION.ESPERANDO_NUMERO_POLIZA:
                return await this.procesarNumeroPoliza(bot, chatId, userId, texto, asignacion);

            case ESTADOS_ASIGNACION.ESPERANDO_ASEGURADORA:
                return await this.procesarAseguradora(bot, chatId, userId, texto, asignacion);

            case ESTADOS_ASIGNACION.ESPERANDO_AGENTE:
                return await this.procesarAgente(bot, chatId, userId, texto, asignacion);

            case ESTADOS_ASIGNACION.ESPERANDO_FECHA_EMISION:
                return await this.procesarFechaEmision(bot, chatId, userId, texto, asignacion);

            case ESTADOS_ASIGNACION.ESPERANDO_FECHA_FIN:
                return await this.procesarFechaFin(bot, chatId, userId, texto, asignacion);

            case ESTADOS_ASIGNACION.ESPERANDO_PAGOS:
                return await this.procesarPagos(bot, chatId, userId, texto, asignacion);

            case ESTADOS_ASIGNACION.ESPERANDO_PDF:
                return await this.procesarPDF(bot, msg, userId, asignacion);

            default:
                return false;
            }
        } catch (error) {
            console.error('Error procesando mensaje de asignaci√≥n:', error);
            await bot.telegram.sendMessage(chatId, '‚ùå Error en la asignaci√≥n. Intenta nuevamente.');
            return true;
        }
    }

    /**
   * Procesa el n√∫mero de p√≥liza
   */
    static async procesarNumeroPoliza(bot, chatId, userId, numeroPoliza, asignacion) {
        if (!numeroPoliza || numeroPoliza.length < 5) {
            await bot.telegram.sendMessage(chatId, '‚ùå El n√∫mero de p√≥liza debe tener al menos 5 caracteres.\nIntenta nuevamente:');
            return true;
        }

        // Verificar que no exista la p√≥liza
        const existePoliza = await policyController.buscarPorNumeroPoliza(numeroPoliza);
        if (existePoliza) {
            await bot.telegram.sendMessage(chatId,
                `‚ùå Ya existe una p√≥liza con este n√∫mero: ${numeroPoliza}\n` +
        'Ingresa un n√∫mero diferente:'
            );
            return true;
        }

        asignacion.datosPoliza.numeroPoliza = numeroPoliza;
        asignacion.estado = ESTADOS_ASIGNACION.ESPERANDO_ASEGURADORA;

        await bot.telegram.sendMessage(chatId,
            `‚úÖ N√∫mero de p√≥liza: *${numeroPoliza}*\n\n` +
      '*Paso 2/7:* Ingresa la *aseguradora*\n' +
      'üìù Ejemplo: GNP, Seguros Monterrey, AXA, etc.',
            { parse_mode: 'Markdown' }
        );

        return true;
    }

    /**
   * Procesa la aseguradora
   */
    static async procesarAseguradora(bot, chatId, userId, aseguradora, asignacion) {
        if (!aseguradora || aseguradora.length < 2) {
            await bot.telegram.sendMessage(chatId, '‚ùå La aseguradora debe tener al menos 2 caracteres.\nIntenta nuevamente:');
            return true;
        }

        asignacion.datosPoliza.aseguradora = aseguradora;
        asignacion.estado = ESTADOS_ASIGNACION.ESPERANDO_AGENTE;

        await bot.telegram.sendMessage(chatId,
            `‚úÖ Aseguradora: *${aseguradora}*\n\n` +
      '*Paso 3/7:* Ingresa el *agente cotizador*\n' +
      'üìù Ejemplo: Juan P√©rez, Mar√≠a Gonz√°lez, etc.',
            { parse_mode: 'Markdown' }
        );

        return true;
    }

    /**
   * Procesa el agente cotizador
   */
    static async procesarAgente(bot, chatId, userId, agente, asignacion) {
        if (!agente || agente.length < 3) {
            await bot.telegram.sendMessage(chatId, '‚ùå El agente debe tener al menos 3 caracteres.\nIntenta nuevamente:');
            return true;
        }

        asignacion.datosPoliza.agenteCotizador = agente;
        asignacion.estado = ESTADOS_ASIGNACION.ESPERANDO_FECHA_EMISION;

        await bot.telegram.sendMessage(chatId,
            `‚úÖ Agente: *${agente}*\n\n` +
      '*Paso 4/7:* Ingresa la *fecha de emisi√≥n*\n' +
      'üìù Formato: DD/MM/AAAA\n' +
      'üìÖ Ejemplo: 15/01/2024',
            { parse_mode: 'Markdown' }
        );

        return true;
    }

    /**
   * Procesa la fecha de emisi√≥n
   */
    static async procesarFechaEmision(bot, chatId, userId, fecha, asignacion) {
        const fechaValida = this.validarFecha(fecha);
        if (!fechaValida) {
            await bot.telegram.sendMessage(chatId,
                '‚ùå Fecha inv√°lida. Usa el formato DD/MM/AAAA\n' +
        'üìÖ Ejemplo: 15/01/2024\nIntenta nuevamente:'
            );
            return true;
        }

        asignacion.datosPoliza.fechaEmision = fechaValida;
        asignacion.estado = ESTADOS_ASIGNACION.ESPERANDO_FECHA_FIN;

        await bot.telegram.sendMessage(chatId,
            `‚úÖ Fecha de emisi√≥n: *${fecha}*\n\n` +
      '*Paso 5/7:* Ingresa la *fecha de fin de cobertura*\n' +
      'üìù Formato: DD/MM/AAAA\n' +
      'üìÖ Ejemplo: 15/01/2025',
            { parse_mode: 'Markdown' }
        );

        return true;
    }

    /**
   * Procesa la fecha de fin de cobertura
   */
    static async procesarFechaFin(bot, chatId, userId, fecha, asignacion) {
        const fechaValida = this.validarFecha(fecha);
        if (!fechaValida) {
            await bot.telegram.sendMessage(chatId,
                '‚ùå Fecha inv√°lida. Usa el formato DD/MM/AAAA\n' +
        'üìÖ Ejemplo: 15/01/2025\nIntenta nuevamente:'
            );
            return true;
        }

        asignacion.datosPoliza.fechaFinCobertura = fechaValida;
        asignacion.estado = ESTADOS_ASIGNACION.ESPERANDO_PAGOS;

        await bot.telegram.sendMessage(chatId,
            `‚úÖ Fecha fin cobertura: *${fecha}*\n\n` +
      '*Paso 6/7:* Informaci√≥n de pagos (opcional)\n' +
      'üìù Formato: MONTO,FECHA\n' +
      'üí∞ Ejemplo: 5000,15/01/2024\n' +
      'üìã Para m√∫ltiples pagos, env√≠a uno por mensaje\n' +
      '‚è≠Ô∏è Escribe "CONTINUAR" para saltar este paso',
            { parse_mode: 'Markdown' }
        );

        return true;
    }

    /**
   * Procesa los pagos (opcional)
   */
    static async procesarPagos(bot, chatId, userId, texto, asignacion) {
        if (texto.toUpperCase() === 'CONTINUAR') {
            asignacion.estado = ESTADOS_ASIGNACION.ESPERANDO_PDF;

            await bot.telegram.sendMessage(chatId,
                '‚è≠Ô∏è Pagos omitidos\n\n' +
        '*Paso 7/7:* Env√≠a el *PDF de la p√≥liza*\n' +
        'üìé Adjunta el archivo PDF\n' +
        '‚è≠Ô∏è O escribe "CONTINUAR" para finalizar sin PDF',
                { parse_mode: 'Markdown' }
            );
            return true;
        }

        // Validar formato de pago
        const pago = this.validarPago(texto);
        if (!pago) {
            await bot.telegram.sendMessage(chatId,
                '‚ùå Formato de pago inv√°lido\n' +
        'üìù Usa: MONTO,FECHA\n' +
        'üí∞ Ejemplo: 5000,15/01/2024\n' +
        'Intenta nuevamente:'
            );
            return true;
        }

        if (!asignacion.datosPoliza.pagos) {
            asignacion.datosPoliza.pagos = [];
        }

        asignacion.datosPoliza.pagos.push(pago);

        await bot.telegram.sendMessage(chatId,
            `‚úÖ Pago agregado: $${pago.monto.toLocaleString()} - ${pago.fecha}\n\n` +
      `üí∞ Total pagos: ${asignacion.datosPoliza.pagos.length}\n` +
      'üìã Agrega otro pago o escribe "CONTINUAR" para el siguiente paso'
        );

        return true;
    }

    /**
   * Procesa el PDF de la p√≥liza
   */
    static async procesarPDF(bot, msg, userId, asignacion) {
        const chatId = msg.chat.id;

        if (msg.text === 'CONTINUAR') {
            return await this.finalizarAsignacion(bot, chatId, userId, asignacion);
        }

        if (!msg.document || msg.document.mime_type !== 'application/pdf') {
            await bot.telegram.sendMessage(chatId,
                'üìé Por favor env√≠a un archivo PDF o escribe "CONTINUAR" para finalizar sin PDF.'
            );
            return true;
        }

        try {
            // Procesar el PDF
            asignacion.datosPoliza.pdf = {
                file_id: msg.document.file_id,
                file_name: msg.document.file_name,
                file_size: msg.document.file_size
            };

            await bot.telegram.sendMessage(chatId,
                `‚úÖ PDF guardado: ${msg.document.file_name}\n\n` +
        'üéâ ¬°Todos los datos est√°n completos!\n' +
        'Procesando asignaci√≥n de p√≥liza...'
            );

            return await this.finalizarAsignacion(bot, chatId, userId, asignacion);

        } catch (error) {
            console.error('Error procesando PDF:', error);
            await bot.telegram.sendMessage(chatId, '‚ùå Error al procesar el PDF. Intenta nuevamente.');
            return true;
        }
    }

    /**
   * Finaliza la asignaci√≥n de p√≥liza
   */
    static async finalizarAsignacion(bot, chatId, userId, asignacion) {
        try {
            const vehiculo = asignacion.vehiculo;
            const datosPoliza = asignacion.datosPoliza;

            // Crear la p√≥liza usando los datos del veh√≠culo + datos de la p√≥liza
            const nuevaPoliza = {
                // Datos del veh√≠culo
                marca: vehiculo.marca,
                submarca: vehiculo.submarca,
                a√±o: vehiculo.a√±o,
                color: vehiculo.color,
                serie: vehiculo.serie,
                placas: vehiculo.placas,

                // Datos temporales del titular (se pueden modificar despu√©s)
                titular: vehiculo.titularTemporal,
                rfc: vehiculo.rfcTemporal,
                telefono: vehiculo.telefonoTemporal,
                correo: vehiculo.correoTemporal,
                calle: vehiculo.calleTemporal,
                colonia: vehiculo.coloniaTemporal,
                municipio: vehiculo.municipioTemporal,
                estadoRegion: vehiculo.estadoRegionTemporal,
                cp: vehiculo.cpTemporal,

                // Datos de la p√≥liza
                numeroPoliza: datosPoliza.numeroPoliza,
                aseguradora: datosPoliza.aseguradora,
                agenteCotizador: datosPoliza.agenteCotizador,
                fechaEmision: datosPoliza.fechaEmision,
                fechaFinCobertura: datosPoliza.fechaFinCobertura,

                // Pagos y archivos
                pagos: datosPoliza.pagos || [],

                // Metadatos especiales
                vehicleId: vehiculo._id, // Referencia al veh√≠culo OBD
                creadoViaOBD: true,
                asignadoPor: userId
            };

            // Crear la p√≥liza
            const resultado = await policyController.crearPoliza(nuevaPoliza);

            if (!resultado.success) {
                await bot.telegram.sendMessage(chatId, `‚ùå Error al crear p√≥liza: ${resultado.error}`);
                return true;
            }

            // Marcar el veh√≠culo como asegurado
            await VehicleController.marcarConPoliza(vehiculo._id, resultado.poliza._id);

            // Alinear fotos: reorganizar en Cloudflare con nueva estructura
            await this.alinearFotosConPoliza(vehiculo, resultado.poliza._id);

            // Procesar PDF si existe
            if (datosPoliza.pdf) {
                // Aqu√≠ se procesar√≠a la subida del PDF
                // Por simplicidad, se omite en este mockup
            }

            const mensaje = 'üéâ *P√ìLIZA ASIGNADA EXITOSAMENTE*\n\n' +
        `üìã *P√≥liza:* ${datosPoliza.numeroPoliza}\n` +
        `üè¢ *Aseguradora:* ${datosPoliza.aseguradora}\n` +
        `üë®‚Äçüíº *Agente:* ${datosPoliza.agenteCotizador}\n\n` +
        'üöó *Veh√≠culo asegurado:*\n' +
        `${vehiculo.marca} ${vehiculo.submarca} ${vehiculo.a√±o}\n` +
        `üë§ Titular: ${vehiculo.titularTemporal}\n\n` +
        '‚úÖ El veh√≠culo ahora tiene estado: CON_POLIZA\n' +
        `üÜî ID de p√≥liza: ${resultado.poliza._id}`;

            await bot.telegram.sendMessage(chatId, mensaje, {
                parse_mode: 'Markdown',
                reply_markup: getMainKeyboard()
            });

            // Limpiar el proceso de asignaci√≥n
            asignacionesEnProceso.delete(userId);

            return true;

        } catch (error) {
            console.error('Error finalizando asignaci√≥n:', error);
            await bot.telegram.sendMessage(chatId, '‚ùå Error al finalizar la asignaci√≥n de p√≥liza.');
            return true;
        }
    }

    /**
   * Valida formato de fecha DD/MM/AAAA
   */
    static validarFecha(fechaStr) {
        const regex = /^(\d{1,2})\/(\d{1,2})\/(\d{4})$/;
        const match = fechaStr.match(regex);

        if (!match) return null;

        const dia = parseInt(match[1]);
        const mes = parseInt(match[2]);
        const a√±o = parseInt(match[3]);

        const fecha = new Date(a√±o, mes - 1, dia);

        if (fecha.getDate() !== dia || fecha.getMonth() !== mes - 1 || fecha.getFullYear() !== a√±o) {
            return null;
        }

        return fecha;
    }

    /**
   * Valida formato de pago MONTO,FECHA
   */
    static validarPago(pagoStr) {
        const partes = pagoStr.split(',');
        if (partes.length !== 2) return null;

        const monto = parseFloat(partes[0]);
        if (isNaN(monto) || monto <= 0) return null;

        const fecha = this.validarFecha(partes[1].trim());
        if (!fecha) return null;

        return {
            monto: monto,
            fecha: fecha
        };
    }

    /**
   * Verifica si un usuario tiene una asignaci√≥n en proceso
   */
    static tieneAsignacionEnProceso(userId) {
        return asignacionesEnProceso.has(userId);
    }

    /**
   * Alinea las fotos del veh√≠culo en Cloudflare con la nueva estructura de p√≥liza
   * Crea una copia organizada de las fotos para el veh√≠culo con p√≥liza
   */
    static async alinearFotosConPoliza(vehiculo, polizaId) {
        try {
            // Si el veh√≠culo tiene fotos en Cloudflare
            if (vehiculo.archivos && vehiculo.archivos.r2Files && vehiculo.archivos.r2Files.fotos.length > 0) {
                const CloudflareStorage = require('../../services/CloudflareStorage');
                const fotosAlineadas = [];

                for (let i = 0; i < vehiculo.archivos.r2Files.fotos.length; i++) {
                    const fotoOriginal = vehiculo.archivos.r2Files.fotos[i];
                    
                    try {
                        // Crear nueva estructura: polizas/{polizaId}/vehiculo_{serie}/
                        const nuevoPath = `polizas/${polizaId}/vehiculo_${vehiculo.serie}`;
                        const nuevoNombre = `foto_${i + 1}_${Date.now()}.jpg`;
                        
                        // Copiar archivo en Cloudflare a nueva ubicaci√≥n
                        const copyResult = await CloudflareStorage.copyFile(
                            fotoOriginal.key, // archivo original
                            `${nuevoPath}/${nuevoNombre}` // nueva ubicaci√≥n
                        );

                        if (copyResult && copyResult.url) {
                            fotosAlineadas.push({
                                url: copyResult.url,
                                key: copyResult.key,
                                originalName: nuevoNombre,
                                contentType: 'image/jpeg',
                                size: fotoOriginal.size,
                                uploadDate: new Date(),
                                polizaId: polizaId,
                                alineadaDe: fotoOriginal.key
                            });
                        }
                    } catch (error) {
                        console.warn(`Error copiando foto ${i + 1}:`, error);
                        // Continuar con las dem√°s fotos
                    }
                }

                // Agregar las fotos alineadas al veh√≠culo
                if (fotosAlineadas.length > 0) {
                    vehiculo.archivos.r2Files.fotos.push(...fotosAlineadas);
                    await vehiculo.save();
                    
                    console.log(`‚úÖ ${fotosAlineadas.length} fotos alineadas para p√≥liza ${polizaId}`);
                }
            }
        } catch (error) {
            console.error('Error alineando fotos con p√≥liza:', error);
            // No fallar el proceso por esto
        }
    }
}

module.exports = {
    PolicyAssignmentHandler,
    ESTADOS_ASIGNACION,
    asignacionesEnProceso
};
