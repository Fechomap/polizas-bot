// src/comandos/comandos/StartCommand.js
const { Markup } = require('telegraf'); // Importar Markup
const BaseCommand = require('./BaseCommand');

class StartCommand extends BaseCommand {
    constructor(handler) {
        super(handler);
    }

    getCommandName() {
        return 'start';
    }

    getDescription() {
        return '¬°Bienvenido al Bot de P√≥lizas! ü§ñ';
    }

    register() {
        // Mantenemos el comando /start por ahora, pero mostramos el men√∫ inline
        this.bot.command(this.getCommandName(), async (ctx) => {
            try {
                const mainMenu = Markup.inlineKeyboard([
                    [
                        Markup.button.callback('Consultar P√≥liza', 'accion:consultar'),
                        Markup.button.callback('Registrar P√≥liza', 'accion:registrar')
                    ],
                    [
                        Markup.button.callback('A√±adir Pago', 'accion:addpayment'),
                        Markup.button.callback('A√±adir Servicio', 'accion:addservice')
                    ],
                    [
                        Markup.button.callback('Subir Archivos', 'accion:upload'),
                        Markup.button.callback('Eliminar P√≥liza', 'accion:delete')
                    ],
                    [
                        Markup.button.callback('Reportes', 'accion:reportes'), // Placeholder, needs submenu
                        Markup.button.callback('Ayuda', 'accion:help')
                    ]
                ]);

                await ctx.reply(
                    '¬°Bienvenido al Bot de P√≥lizas! ü§ñ\n\nSelecciona una opci√≥n:',
                    mainMenu
                );
                this.logInfo('Men√∫ principal mostrado v√≠a /start', { chatId: ctx.chat.id });
            } catch (error) {
                this.logError('Error en comando start al mostrar men√∫:', error);
                await ctx.reply('‚ùå Error al mostrar el men√∫ principal. Intenta nuevamente.');
            }
        });
    }

    // M√©todo para mostrar el men√∫ principal (reutilizable)
    async showMainMenu(ctx) {
        try {
            const mainMenu = Markup.inlineKeyboard([
                 [
                    Markup.button.callback('Consultar P√≥liza', 'accion:consultar'),
                    Markup.button.callback('Registrar P√≥liza', 'accion:registrar')
                ],
                [
                    Markup.button.callback('A√±adir Pago', 'accion:addpayment'),
                    Markup.button.callback('A√±adir Servicio', 'accion:addservice')
                ],
                [
                    Markup.button.callback('Subir Archivos', 'accion:upload'),
                    Markup.button.callback('Eliminar P√≥liza', 'accion:delete')
                ],
                [
                    Markup.button.callback('Reportes', 'accion:reportes'), // Placeholder
                    Markup.button.callback('Ayuda', 'accion:help')
                ]
            ]);

            // Podr√≠amos editar el mensaje anterior si existe ctx.callbackQuery
            if (ctx.callbackQuery) {
                 await ctx.editMessageText(
                    'Men√∫ Principal:',
                    mainMenu
                );
                await ctx.answerCbQuery();
            } else {
                // Si no es callback, enviamos uno nuevo
                await ctx.reply(
                    'Men√∫ Principal:',
                    mainMenu
                );
            }
             this.logInfo('Men√∫ principal mostrado', { chatId: ctx.chat.id });
        } catch (error) {
            this.logError('Error al mostrar men√∫ principal (showMainMenu):', error);
            // Evitar doble respuesta si falla la edici√≥n
            if (!ctx.callbackQuery) {
                await ctx.reply('‚ùå Error al mostrar el men√∫.');
            } else {
                 try { await ctx.answerCbQuery('Error al mostrar men√∫'); } catch {}
            }
        }
    }
}

module.exports = StartCommand;
