// src/services/AutoCleanupService.js
const Policy = require('../models/policy');
const logger = require('../utils/logger');

class AutoCleanupService {
    constructor() {
        this.stats = {
            automaticDeletions: 0,
            expiredPoliciesFound: 0,
            errors: 0
        };
    }

    /**
     * Ejecuta la limpieza autom√°tica de p√≥lizas
     * @returns {Object} Estad√≠sticas del proceso
     */
    async executeAutoCleanup() {
        logger.info('üîÑ Iniciando limpieza autom√°tica de p√≥lizas');

        this.resetStats();

        try {
            // PASO 1: Eliminaci√≥n autom√°tica de p√≥lizas con >= 2 servicios
            await this.deletePolizasWithTwoOrMoreServices();

            // PASO 2: Reporte de p√≥lizas vencidas para revisi√≥n manual
            const expiredPolicies = await this.getExpiredPoliciesForReview();

            logger.info('‚úÖ Limpieza autom√°tica completada', {
                automaticDeletions: this.stats.automaticDeletions,
                expiredPoliciesFound: this.stats.expiredPoliciesFound,
                errors: this.stats.errors
            });

            return {
                success: true,
                stats: this.stats,
                expiredPolicies: expiredPolicies
            };
        } catch (error) {
            logger.error('‚ùå Error en limpieza autom√°tica:', error);
            this.stats.errors++;

            return {
                success: false,
                error: error.message,
                stats: this.stats,
                expiredPolicies: []
            };
        }
    }

    /**
     * Elimina autom√°ticamente p√≥lizas con 2 o m√°s servicios confirmados
     */
    async deletePolizasWithTwoOrMoreServices() {
        logger.info('üîç Buscando p√≥lizas con >= 2 servicios para eliminaci√≥n autom√°tica');

        try {
            // Buscar p√≥lizas activas con 2 o m√°s servicios
            const polizasToDelete = await Policy.find({
                estado: 'ACTIVO',
                $expr: { $gte: [{ $size: '$servicios' }, 2] }
            }).select('numeroPoliza servicios');

            logger.info(
                `üìä Encontradas ${polizasToDelete.length} p√≥lizas con ‚â• 2 servicios para eliminaci√≥n autom√°tica`
            );

            if (polizasToDelete.length === 0) {
                return;
            }

            // Eliminar cada p√≥liza usando borrado l√≥gico
            for (const poliza of polizasToDelete) {
                try {
                    await this.deletePolizaLogically(
                        poliza.numeroPoliza,
                        `Eliminaci√≥n autom√°tica: ${poliza.servicios.length} servicios confirmados`
                    );

                    this.stats.automaticDeletions++;

                    logger.info(
                        `‚úÖ P√≥liza ${poliza.numeroPoliza} eliminada autom√°ticamente (${poliza.servicios.length} servicios)`
                    );
                } catch (error) {
                    logger.error(`‚ùå Error eliminando p√≥liza ${poliza.numeroPoliza}:`, error);
                    this.stats.errors++;
                }
            }
        } catch (error) {
            logger.error('‚ùå Error buscando p√≥lizas con >= 2 servicios:', error);
            this.stats.errors++;
            throw error;
        }
    }

    /**
     * Obtiene p√≥lizas vencidas para revisi√≥n manual
     * @returns {Array} Lista de p√≥lizas vencidas
     */
    async getExpiredPoliciesForReview() {
        logger.info('üîç Buscando p√≥lizas vencidas para revisi√≥n manual');

        try {
            // Buscar p√≥lizas activas con estado VENCIDA
            const expiredPolicies = await Policy.find({
                estado: 'ACTIVO',
                estadoPoliza: 'VENCIDA'
            })
                .select('numeroPoliza titular aseguradora fechaEmision estadoPoliza servicios')
                .sort({ fechaEmision: 1 }); // Ordenar por fecha de emisi√≥n (m√°s antiguas primero)

            this.stats.expiredPoliciesFound = expiredPolicies.length;

            logger.info(`üìä Encontradas ${expiredPolicies.length} p√≥lizas vencidas para revisi√≥n`);

            // Formatear datos para el reporte
            return expiredPolicies.map(poliza => ({
                numeroPoliza: poliza.numeroPoliza,
                titular: poliza.titular,
                aseguradora: poliza.aseguradora,
                fechaEmision: poliza.fechaEmision,
                estadoPoliza: poliza.estadoPoliza,
                servicios: poliza.servicios ? poliza.servicios.length : 0,
                diasVencida: this.calculateDaysExpired(poliza.fechaEmision)
            }));
        } catch (error) {
            logger.error('‚ùå Error buscando p√≥lizas vencidas:', error);
            this.stats.errors++;
            throw error;
        }
    }

    /**
     * Realiza borrado l√≥gico de una p√≥liza
     * @param {string} numeroPoliza - N√∫mero de la p√≥liza
     * @param {string} motivo - Motivo de eliminaci√≥n
     */
    async deletePolizaLogically(numeroPoliza, motivo) {
        const policy = await Policy.findOne({ numeroPoliza });

        if (!policy) {
            throw new Error(`P√≥liza ${numeroPoliza} no encontrada`);
        }

        if (policy.estado === 'ELIMINADO') {
            logger.warn(`P√≥liza ${numeroPoliza} ya est√° eliminada`);
            return;
        }

        // Aplicar borrado l√≥gico
        policy.estado = 'ELIMINADO';
        policy.fechaEliminacion = new Date();
        policy.motivoEliminacion = motivo;

        await policy.save();

        logger.info(`üóëÔ∏è P√≥liza ${numeroPoliza} marcada como eliminada: ${motivo}`);
    }

    /**
     * Calcula d√≠as transcurridos desde emisi√≥n (aproximado para vencimiento)
     * @param {Date} fechaEmision
     * @returns {number} D√≠as desde emisi√≥n
     */
    calculateDaysExpired(fechaEmision) {
        const now = new Date();
        const emissionDate = new Date(fechaEmision);
        const diffTime = Math.abs(now - emissionDate);
        return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    }

    /**
     * Reinicia las estad√≠sticas del proceso
     */
    resetStats() {
        this.stats = {
            automaticDeletions: 0,
            expiredPoliciesFound: 0,
            errors: 0
        };
    }

    /**
     * Obtiene un resumen previo de lo que se va a procesar SIN ejecutar
     * @returns {Object} Resumen previo
     */
    async getCleanupPreview() {
        logger.info('üîç Generando resumen previo de limpieza autom√°tica');

        try {
            // Contar p√≥lizas con >= 2 servicios (para eliminaci√≥n autom√°tica)
            const polizasToDelete = await Policy.countDocuments({
                estado: 'ACTIVO',
                $expr: { $gte: [{ $size: '$servicios' }, 2] }
            });

            // Contar p√≥lizas vencidas (para reporte)
            const expiredPolicies = await Policy.countDocuments({
                estado: 'ACTIVO',
                estadoPoliza: 'VENCIDA'
            });

            // Obtener algunos ejemplos para mostrar
            const examplePolicies = await Policy.find({
                estado: 'ACTIVO',
                $expr: { $gte: [{ $size: '$servicios' }, 2] }
            })
                .select('numeroPoliza servicios titular')
                .limit(5);

            const exampleExpired = await Policy.find({
                estado: 'ACTIVO',
                estadoPoliza: 'VENCIDA'
            })
                .select('numeroPoliza titular estadoPoliza')
                .limit(3);

            return {
                success: true,
                preview: {
                    policiesToDelete: polizasToDelete,
                    expiredPoliciesFound: expiredPolicies,
                    examplePolicies: examplePolicies.map(p => ({
                        numeroPoliza: p.numeroPoliza,
                        titular: p.titular,
                        servicios: p.servicios.length
                    })),
                    exampleExpired: exampleExpired.map(p => ({
                        numeroPoliza: p.numeroPoliza,
                        titular: p.titular,
                        estado: p.estadoPoliza
                    }))
                }
            };
        } catch (error) {
            logger.error('‚ùå Error generando resumen previo:', error);
            return {
                success: false,
                error: error.message,
                preview: {
                    policiesToDelete: 0,
                    expiredPoliciesFound: 0,
                    examplePolicies: [],
                    exampleExpired: []
                }
            };
        }
    }

    /**
     * Obtiene estad√≠sticas del √∫ltimo proceso
     * @returns {Object} Estad√≠sticas
     */
    getStats() {
        return { ...this.stats };
    }
}

module.exports = AutoCleanupService;
