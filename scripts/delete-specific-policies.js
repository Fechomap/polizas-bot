const mongoose = require('mongoose');
require('dotenv').config();
const { Policy } = require('../src/models');

// N√∫meros de p√≥liza a eliminar (sin el gui√≥n)
const policiesToDelete = [
    '1453.47',
    '1580.77',
    '1416.99',
    '834.63',
    '282.29',
    '904.82',
    '866.2',
    '277.31',
    '909.82',
    '728.82',
    '710.1'
];

async function connectToDatabase() {
    try {
        await mongoose.connect(process.env.MONGO_URI, {
            useNewUrlParser: true,
            useUnifiedTopology: true,
        });
        console.log('‚úÖ Conectado a MongoDB');
    } catch (error) {
        console.error('‚ùå Error conectando a MongoDB:', error);
        process.exit(1);
    }
}

async function verifyPoliciesExist() {
    console.log('\nüîç Verificando que las p√≥lizas existen...\n');

    const existingPolicies = [];
    const notFoundPolicies = [];

    for (const policyNumber of policiesToDelete) {
        try {
            const policy = await Policy.findOne({ numeroPoliza: policyNumber });
            if (policy) {
                existingPolicies.push({
                    numeroPoliza: policy.numeroPoliza,
                    titular: policy.titular,
                    id: policy._id
                });
                console.log(`‚úÖ Encontrada: ${policyNumber} - ${policy.titular}`);
            } else {
                notFoundPolicies.push(policyNumber);
                console.log(`‚ùå No encontrada: ${policyNumber}`);
            }
        } catch (error) {
            console.error(`‚ùå Error buscando p√≥liza ${policyNumber}:`, error.message);
            notFoundPolicies.push(policyNumber);
        }
    }

    console.log('\nüìä Resumen de verificaci√≥n:');
    console.log(`   ‚Ä¢ P√≥lizas encontradas: ${existingPolicies.length}`);
    console.log(`   ‚Ä¢ P√≥lizas no encontradas: ${notFoundPolicies.length}`);

    if (notFoundPolicies.length > 0) {
        console.log('\n‚ö†Ô∏è  P√≥lizas no encontradas:', notFoundPolicies);
    }

    return existingPolicies;
}

async function deletePoliciesPhysically(policiesToDelete) {
    if (policiesToDelete.length === 0) {
        console.log('\n‚ö†Ô∏è  No hay p√≥lizas para eliminar.');
        return;
    }

    console.log(`\nüóëÔ∏è  Iniciando eliminaci√≥n f√≠sica de ${policiesToDelete.length} p√≥lizas...\n`);

    const deletedPolicies = [];
    const errors = [];

    for (const policy of policiesToDelete) {
        try {
            // Eliminaci√≥n f√≠sica completa (deleteOne)
            const result = await Policy.deleteOne({ numeroPoliza: policy.numeroPoliza });

            if (result.deletedCount > 0) {
                deletedPolicies.push(policy.numeroPoliza);
                console.log(`‚úÖ Eliminada f√≠sicamente: ${policy.numeroPoliza} - ${policy.titular}`);
            } else {
                errors.push(`No se pudo eliminar: ${policy.numeroPoliza}`);
                console.log(`‚ùå No se pudo eliminar: ${policy.numeroPoliza}`);
            }
        } catch (error) {
            errors.push(`Error eliminando ${policy.numeroPoliza}: ${error.message}`);
            console.error(`‚ùå Error eliminando ${policy.numeroPoliza}:`, error.message);
        }
    }

    console.log('\nüìä Resumen de eliminaci√≥n:');
    console.log(`   ‚Ä¢ P√≥lizas eliminadas exitosamente: ${deletedPolicies.length}`);
    console.log(`   ‚Ä¢ Errores: ${errors.length}`);

    if (errors.length > 0) {
        console.log('\n‚ö†Ô∏è  Errores encontrados:');
        errors.forEach(error => console.log(`   ‚Ä¢ ${error}`));
    }

    if (deletedPolicies.length > 0) {
        console.log('\n‚úÖ P√≥lizas eliminadas exitosamente:');
        deletedPolicies.forEach(policy => console.log(`   ‚Ä¢ ${policy}`));
    }

    return { deletedPolicies, errors };
}

async function main() {
    try {
        console.log('üöÄ Iniciando proceso de eliminaci√≥n f√≠sica de p√≥lizas...');
        console.log(`üìã P√≥lizas a procesar: ${policiesToDelete.join(', ')}`);

        await connectToDatabase();

        // Paso 1: Verificar que las p√≥lizas existen
        const existingPolicies = await verifyPoliciesExist();

        if (existingPolicies.length === 0) {
            console.log('\n‚ö†Ô∏è  No se encontraron p√≥lizas para eliminar. Terminando proceso.');
            return;
        }

        // Paso 2: Confirmar eliminaci√≥n
        console.log('\n‚ö†Ô∏è  ADVERTENCIA: Esta acci√≥n eliminar√° F√çSICAMENTE las p√≥lizas de la base de datos.');
        console.log('‚ö†Ô∏è  Esta acci√≥n NO se puede deshacer.');
        console.log('\nüîÑ Procediendo con la eliminaci√≥n en 3 segundos...');

        // Esperar 3 segundos para dar tiempo a cancelar si es necesario
        await new Promise(resolve => setTimeout(resolve, 3000));

        // Paso 3: Eliminar f√≠sicamente
        const result = await deletePoliciesPhysically(existingPolicies);

        console.log('\n‚úÖ Proceso completado.');

        if (result.deletedPolicies.length > 0) {
            console.log('‚úÖ Las p√≥lizas han sido eliminadas f√≠sicamente de la base de datos.');
        }

    } catch (error) {
        console.error('‚ùå Error en el proceso principal:', error);
    } finally {
        await mongoose.connection.close();
        console.log('üîå Conexi√≥n a MongoDB cerrada.');
        process.exit(0);
    }
}

// Ejecutar solo si se llama directamente
if (require.main === module) {
    main();
}

module.exports = {
    verifyPoliciesExist,
    deletePoliciesPhysically,
    policiesToDelete
};
