// scripts/auditoria-vehiculos-2023-2026.js
// Auditor√≠a sistem√°tica de veh√≠culos 2023-2026 que deber√≠an ser NIVs
require('dotenv').config();
const mongoose = require('mongoose');

// Esquemas flexibles para investigaci√≥n
const VehicleSchema = new mongoose.Schema({}, { strict: false });
const PolicySchema = new mongoose.Schema({}, { strict: false });
const Vehicle = mongoose.model('Vehicle', VehicleSchema);
const Policy = mongoose.model('Policy', PolicySchema);

const connectDB = async () => {
    try {
        const mongoURI = process.env.MONGO_URI;
        if (!mongoURI) {
            console.log('‚ùå MONGO_URI no est√° definida');
            return false;
        }
        await mongoose.connect(mongoURI);
        console.log('‚úÖ Conectado a MongoDB exitosamente');
        return true;
    } catch (error) {
        console.error('‚ùå Error al conectar a MongoDB:', error.message);
        return false;
    }
};

async function auditoriaVehiculos2023_2026() {
    console.log('üîç AUDITOR√çA SISTEM√ÅTICA - VEH√çCULOS 2023-2026');
    console.log('‚ïê'.repeat(80));
    console.log('üéØ Objetivo: Identificar veh√≠culos que deber√≠an ser NIVs');
    console.log('üìÖ Rango: A√±os 2023, 2024, 2025, 2026');
    console.log('');

    try {
        const conectado = await connectDB();
        if (!conectado) {
            console.log('‚ùå No se pudo conectar a la base de datos');
            return;
        }

        console.log('üìã 1. B√öSQUEDA DE VEH√çCULOS 2023-2026:');
        console.log('-'.repeat(60));

        // Buscar TODOS los veh√≠culos de los a√±os objetivo
        const vehiculosObjetivo = await Vehicle.find({
            a√±o: { $in: [2023, 2024, 2025, 2026] }
        }).lean();

        console.log(`üìä VEH√çCULOS ENCONTRADOS: ${vehiculosObjetivo.length}`);

        if (vehiculosObjetivo.length === 0) {
            console.log('‚ùå No se encontraron veh√≠culos 2023-2026');
            return;
        }

        // Agrupar por a√±o para mejor an√°lisis
        const vehiculosPorA√±o = {
            2023: vehiculosObjetivo.filter(v => v.a√±o === 2023),
            2024: vehiculosObjetivo.filter(v => v.a√±o === 2024),
            2025: vehiculosObjetivo.filter(v => v.a√±o === 2025),
            2026: vehiculosObjetivo.filter(v => v.a√±o === 2026)
        };

        console.log('üìä DISTRIBUCI√ìN POR A√ëO:');
        Object.entries(vehiculosPorA√±o).forEach(([a√±o, vehiculos]) => {
            console.log(`   ‚Ä¢ ${a√±o}: ${vehiculos.length} veh√≠culos`);
        });

        console.log('\nüìã 2. AN√ÅLISIS DETALLADO POR VEH√çCULO:');
        console.log('-'.repeat(60));

        const contadores = {
            total: 0,
            deberianSerNIV: 0,
            yaSonNIV: 0,
            yaSonNIP: 0,
            vehiculosNormales: 0,
            conPoliza: 0,
            sinPoliza: 0,
            eliminados: 0,
            inconsistencias: 0
        };

        const problemas = [];
        const migracionesPendientes = [];

        for (const vehiculo of vehiculosObjetivo) {
            contadores.total++;

            console.log(`\nüöó ${contadores.total}. ${vehiculo.marca} ${vehiculo.submarca} ${vehiculo.a√±o}`);
            console.log(`   ‚Ä¢ Serie: ${vehiculo.serie}`);
            console.log(`   ‚Ä¢ Estado: ${vehiculo.estado}`);
            console.log(`   ‚Ä¢ PolicyId: ${vehiculo.policyId || 'null'}`);
            console.log(`   ‚Ä¢ Creado: ${vehiculo.createdAt}`);
            console.log(`   ‚Ä¢ Actualizado: ${vehiculo.updatedAt}`);

            // Categorizar estado del veh√≠culo
            let categoriaVehiculo = '';
            if (vehiculo.estado === 'ELIMINADO') {
                contadores.eliminados++;
                categoriaVehiculo = 'ELIMINADO';
            } else if (vehiculo.estado === 'CONVERTIDO_NIV') {
                contadores.yaSonNIV++;
                categoriaVehiculo = 'YA_ES_NIV';
            } else if (vehiculo.estado === 'CONVERTIDO_NIP') {
                contadores.yaSonNIP++;
                categoriaVehiculo = 'YA_ES_NIP_ANTIGUO';
            } else if (vehiculo.estado === 'CON_POLIZA') {
                contadores.conPoliza++;
                categoriaVehiculo = 'VEHICULO_NORMAL_CON_POLIZA';
            } else if (vehiculo.estado === 'SIN_POLIZA') {
                contadores.sinPoliza++;
                categoriaVehiculo = 'VEHICULO_NORMAL_SIN_POLIZA';
            } else {
                categoriaVehiculo = `ESTADO_DESCONOCIDO_${vehiculo.estado}`;
            }

            console.log(`   üìä Categor√≠a: ${categoriaVehiculo}`);

            // Analizar p√≥liza asociada si existe
            let polizaAsociada = null;
            if (vehiculo.policyId) {
                try {
                    polizaAsociada = await Policy.findById(vehiculo.policyId).lean();
                    if (polizaAsociada) {
                        console.log(`   üîó P√≥liza: ${polizaAsociada.numeroPoliza}`);
                        console.log(`   üîó TipoPoliza: ${polizaAsociada.tipoPoliza || 'REGULAR'}`);
                        console.log(`   üîó Estado: ${polizaAsociada.estado}`);
                        console.log(`   üîó TotalServicios: ${polizaAsociada.totalServicios || 0}`);
                    } else {
                        console.log(`   üö® P√≥liza ${vehiculo.policyId} no encontrada`);
                        problemas.push({
                            tipo: 'POLIZA_NO_ENCONTRADA',
                            vehiculo: vehiculo.serie,
                            policyId: vehiculo.policyId
                        });
                    }
                } catch (error) {
                    console.log(`   üö® Error buscando p√≥liza: ${error.message}`);
                }
            }

            // Determinar si DEBER√çA ser NIV
            const deberiaSerNIV = vehiculo.a√±o >= 2023 && vehiculo.a√±o <= 2026;

            if (deberiaSerNIV) {
                contadores.deberianSerNIV++;

                // Verificar si ya est√° correctamente configurado
                let estadoCorrectoNIV = false;
                let estadoCorrectoPoliza = false;

                if (vehiculo.estado === 'CONVERTIDO_NIV' || vehiculo.estado === 'CONVERTIDO_NIP') {
                    estadoCorrectoNIV = true;
                }

                if (polizaAsociada && (polizaAsociada.tipoPoliza === 'NIV' || polizaAsociada.tipoPoliza === 'NIP')) {
                    estadoCorrectoPoliza = true;
                }

                console.log('   üéØ DEBER√çA SER NIV: S√ç');
                console.log(`   ‚úÖ Estado veh√≠culo correcto: ${estadoCorrectoNIV ? 'S√ç' : 'NO'}`);
                console.log(`   ‚úÖ Estado p√≥liza correcto: ${estadoCorrectoPoliza ? 'S√ç' : 'NO'}`);

                // Detectar casos que necesitan migraci√≥n
                if (!estadoCorrectoNIV || !estadoCorrectoPoliza) {
                    console.log('   üîÑ REQUIERE MIGRACI√ìN');

                    const migracion = {
                        vehiculo: {
                            serie: vehiculo.serie,
                            marca: vehiculo.marca,
                            submarca: vehiculo.submarca,
                            a√±o: vehiculo.a√±o,
                            estadoActual: vehiculo.estado,
                            estadoDeseado: vehiculo.estado === 'CONVERTIDO_NIP' ? 'CONVERTIDO_NIV' : 'CONVERTIDO_NIV'
                        },
                        poliza: polizaAsociada ? {
                            numeroPoliza: polizaAsociada.numeroPoliza,
                            tipoActual: polizaAsociada.tipoPoliza || 'REGULAR',
                            tipoDeseado: 'NIV'
                        } : null,
                        acciones: []
                    };

                    // Determinar acciones espec√≠ficas
                    if (vehiculo.estado !== 'CONVERTIDO_NIV' && vehiculo.estado !== 'CONVERTIDO_NIP') {
                        migracion.acciones.push('CONVERTIR_VEHICULO_A_NIV');
                    } else if (vehiculo.estado === 'CONVERTIDO_NIP') {
                        migracion.acciones.push('ACTUALIZAR_TERMINOLOGIA_VEHICULO_NIP_TO_NIV');
                    }

                    if (!polizaAsociada) {
                        migracion.acciones.push('CREAR_POLIZA_NIV');
                    } else if (polizaAsociada.tipoPoliza !== 'NIV' && polizaAsociada.tipoPoliza !== 'NIP') {
                        migracion.acciones.push('CONVERTIR_POLIZA_A_NIV');
                    } else if (polizaAsociada.tipoPoliza === 'NIP') {
                        migracion.acciones.push('ACTUALIZAR_TERMINOLOGIA_POLIZA_NIP_TO_NIV');
                    }

                    migracionesPendientes.push(migracion);
                }

                // Detectar inconsistencias espec√≠ficas
                if (vehiculo.estado === 'CONVERTIDO_NIV' && polizaAsociada && polizaAsociada.tipoPoliza === 'NIP') {
                    contadores.inconsistencias++;
                    problemas.push({
                        tipo: 'INCONSISTENCIA_VEHICULO_NIV_POLIZA_NIP',
                        vehiculo: vehiculo.serie,
                        poliza: polizaAsociada.numeroPoliza
                    });
                    console.log('   üö® INCONSISTENCIA: Veh√≠culo es NIV pero p√≥liza es NIP');
                }

                if (vehiculo.estado === 'CONVERTIDO_NIP' && polizaAsociada && polizaAsociada.tipoPoliza === 'NIV') {
                    contadores.inconsistencias++;
                    problemas.push({
                        tipo: 'INCONSISTENCIA_VEHICULO_NIP_POLIZA_NIV',
                        vehiculo: vehiculo.serie,
                        poliza: polizaAsociada.numeroPoliza
                    });
                    console.log('   üö® INCONSISTENCIA: Veh√≠culo es NIP pero p√≥liza es NIV');
                }
            } else {
                console.log('   üéØ DEBER√çA SER NIV: NO (a√±o fuera de rango)');
            }
        }

        console.log('\nüìã 3. RESUMEN ESTAD√çSTICO:');
        console.log('‚ïê'.repeat(80));
        console.log('üìä TOTALES:');
        console.log(`   ‚Ä¢ Veh√≠culos analizados: ${contadores.total}`);
        console.log(`   ‚Ä¢ Deber√≠an ser NIV: ${contadores.deberianSerNIV}`);
        console.log(`   ‚Ä¢ Ya son NIV (nuevo): ${contadores.yaSonNIV}`);
        console.log(`   ‚Ä¢ Ya son NIP (antiguo): ${contadores.yaSonNIP}`);
        console.log(`   ‚Ä¢ Veh√≠culos normales con p√≥liza: ${contadores.conPoliza}`);
        console.log(`   ‚Ä¢ Veh√≠culos normales sin p√≥liza: ${contadores.sinPoliza}`);
        console.log(`   ‚Ä¢ Eliminados: ${contadores.eliminados}`);
        console.log(`   ‚Ä¢ Inconsistencias detectadas: ${contadores.inconsistencias}`);

        console.log('\nüìã 4. PROBLEMAS DETECTADOS:');
        console.log('-'.repeat(60));
        if (problemas.length === 0) {
            console.log('‚úÖ No se detectaron problemas cr√≠ticos');
        } else {
            problemas.forEach((problema, index) => {
                console.log(`${index + 1}. ${problema.tipo}`);
                console.log(`   Veh√≠culo: ${problema.vehiculo}`);
                if (problema.poliza) console.log(`   P√≥liza: ${problema.poliza}`);
                if (problema.policyId) console.log(`   PolicyId: ${problema.policyId}`);
            });
        }

        console.log('\nüìã 5. PLAN DE MIGRACI√ìN:');
        console.log('‚ïê'.repeat(80));
        console.log(`üîÑ VEH√çCULOS QUE REQUIEREN MIGRACI√ìN: ${migracionesPendientes.length}`);

        if (migracionesPendientes.length === 0) {
            console.log('‚úÖ Todos los veh√≠culos 2023-2026 est√°n correctamente configurados como NIVs');
        } else {
            console.log('\nüìã ACCIONES REQUERIDAS:');

            const accionesPorTipo = {};
            migracionesPendientes.forEach(migracion => {
                migracion.acciones.forEach(accion => {
                    if (!accionesPorTipo[accion]) {
                        accionesPorTipo[accion] = 0;
                    }
                    accionesPorTipo[accion]++;
                });
            });

            Object.entries(accionesPorTipo).forEach(([accion, cantidad]) => {
                console.log(`   ‚Ä¢ ${accion}: ${cantidad} casos`);
            });

            console.log('\nüìã CASOS ESPEC√çFICOS DE MIGRACI√ìN:');
            migracionesPendientes.forEach((migracion, index) => {
                console.log(`\n${index + 1}. ${migracion.vehiculo.serie} (${migracion.vehiculo.marca} ${migracion.vehiculo.a√±o})`);
                console.log(`   Estado actual: ${migracion.vehiculo.estadoActual}`);
                console.log(`   Estado deseado: ${migracion.vehiculo.estadoDeseado}`);
                if (migracion.poliza) {
                    console.log(`   P√≥liza: ${migracion.poliza.numeroPoliza} (${migracion.poliza.tipoActual} ‚Üí ${migracion.poliza.tipoDeseado})`);
                }
                console.log(`   Acciones: ${migracion.acciones.join(', ')}`);
            });
        }

        console.log('\nüìã 6. RECOMENDACIONES:');
        console.log('‚ïê'.repeat(80));

        if (migracionesPendientes.length > 0) {
            console.log('üí° ACCIONES RECOMENDADAS:');
            console.log('   1. üîÑ Crear script de migraci√≥n autom√°tica');
            console.log('   2. üß™ Probar migraci√≥n en entorno de desarrollo primero');
            console.log('   3. üìä Hacer backup de datos antes de migraci√≥n');
            console.log('   4. ‚úÖ Verificar integridad post-migraci√≥n');
            console.log('   5. üîç Monitorear reportes despu√©s de la migraci√≥n');

            console.log('\nüö® PRIORIDADES:');
            const vehiculosConPoliza = migracionesPendientes.filter(m => m.poliza);
            const vehiculosSinPoliza = migracionesPendientes.filter(m => !m.poliza);

            console.log(`   ‚Ä¢ ALTA: ${vehiculosConPoliza.length} veh√≠culos con p√≥liza que necesitan actualizaci√≥n`);
            console.log(`   ‚Ä¢ MEDIA: ${vehiculosSinPoliza.length} veh√≠culos sin p√≥liza que necesitan conversi√≥n completa`);
        } else {
            console.log('‚úÖ SISTEMA COHERENTE: Todos los veh√≠culos est√°n correctamente configurados');
        }

        // Caso espec√≠fico Journey
        const journeyEnMigracion = migracionesPendientes.find(m => m.vehiculo.serie === 'LMWDT1G89P1141436');
        if (journeyEnMigracion) {
            console.log('\nüéØ CASO ESPEC√çFICO - JOURNEY:');
            console.log('   ‚Ä¢ Confirmado en lista de migraci√≥n');
            console.log(`   ‚Ä¢ Acciones: ${journeyEnMigracion.acciones.join(', ')}`);
            console.log('   ‚Ä¢ Esta es la causa del fallo de reportes reportado');
        }

    } catch (error) {
        console.error('‚ùå Error en auditor√≠a:', error);
    } finally {
        await mongoose.connection.close();
        console.log('\nüîå Conexi√≥n cerrada');
        process.exit(0);
    }
}

auditoriaVehiculos2023_2026().catch(console.error);
