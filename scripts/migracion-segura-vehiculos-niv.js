// scripts/migracion-segura-vehiculos-niv.js
// Migraci√≥n SEGURA de veh√≠culos 2023-2026 a NIVs
require('dotenv').config();
const mongoose = require('mongoose');

// CONFIGURACI√ìN DE SEGURIDAD
const MODO_SIMULACION = false; // CAMBIADO A MODO REAL - AUTORIZADO
const VERIFICAR_CADA_PASO = true;
const TIMEOUT_TRANSACCION = 10000; // 10 segundos m√°ximo por transacci√≥n

// Esquemas flexibles
const VehicleSchema = new mongoose.Schema({}, { strict: false });
const PolicySchema = new mongoose.Schema({}, { strict: false });
const Vehicle = mongoose.model('Vehicle', VehicleSchema);
const Policy = mongoose.model('Policy', PolicySchema);

const connectDB = async () => {
    try {
        const mongoURI = process.env.MONGO_URI;
        if (!mongoURI) {
            console.log('‚ùå MONGO_URI no est√° definida');
            return false;
        }
        await mongoose.connect(mongoURI);
        console.log('‚úÖ Conectado a MongoDB exitosamente');
        return true;
    } catch (error) {
        console.error('‚ùå Error al conectar a MongoDB:', error.message);
        return false;
    }
};

// Funci√≥n para generar datos mexicanos realistas
const generarDatosMexicanos = () => {
    const nombres = ['Jos√© Luis', 'Mar√≠a Elena', 'Carlos Alberto', 'Ana Patricia', 'Roberto', 'Leticia'];
    const apellidos = ['Garc√≠a L√≥pez', 'Hern√°ndez Silva', 'Mart√≠nez Cruz', 'L√≥pez Herrera', 'Gonz√°lez Ruiz'];
    const calles = ['Av. Revoluci√≥n', 'Calle Morelos', 'Av. Ju√°rez', 'Calle Hidalgo', 'Av. Independencia'];
    const colonias = ['Centro', 'Del Valle', 'Roma Norte', 'Condesa', 'Polanco', 'Doctores'];
    const municipios = ['Guadalajara', 'Zapopan', 'Tlaquepaque', 'Tonal√°', 'Tlajomulco'];
    const estados = ['JALISCO', 'CDMX', 'NUEVO LE√ìN', 'PUEBLA'];
    
    const nombre = nombres[Math.floor(Math.random() * nombres.length)];
    const apellido = apellidos[Math.floor(Math.random() * apellidos.length)];
    const titular = `${nombre} ${apellido}`;
    
    // Generar RFC realista
    const iniciales = nombre.charAt(0) + apellido.split(' ')[0].charAt(0) + apellido.split(' ')[1]?.charAt(0) || 'X';
    const fecha = '850715'; // Fecha fija para consistencia
    const homoclave = 'A1B';
    const rfc = `${iniciales}${fecha}${homoclave}`;
    
    return {
        titular,
        rfc,
        telefono: `33${Math.floor(Math.random() * 90000000 + 10000000)}`,
        correo: `${nombre.toLowerCase().replace(' ', '.')}@email.com`,
        calle: `${calles[Math.floor(Math.random() * calles.length)]} ${Math.floor(Math.random() * 999 + 1)}`,
        colonia: colonias[Math.floor(Math.random() * colonias.length)],
        municipio: municipios[Math.floor(Math.random() * municipios.length)],
        estadoRegion: estados[Math.floor(Math.random() * estados.length)],
        cp: `${Math.floor(Math.random() * 90000 + 10000)}`
    };
};

// Funci√≥n de verificaci√≥n pre-migraci√≥n
async function verificacionPreMigracion() {
    console.log('üîç VERIFICACI√ìN PRE-MIGRACI√ìN');
    console.log('-'.repeat(60));
    
    try {
        // Verificar conectividad
        const testQuery = await Vehicle.countDocuments();
        console.log(`‚úÖ Conectividad DB: ${testQuery} veh√≠culos totales`);
        
        // Verificar veh√≠culos objetivo
        const vehiculosObjetivo = await Vehicle.find({
            a√±o: { $in: [2023, 2024, 2025, 2026] }
        }).lean();
        
        console.log(`üìä Veh√≠culos 2023-2026: ${vehiculosObjetivo.length}`);
        
        // Verificar espacio en DB
        const dbStats = await mongoose.connection.db.stats();
        console.log(`üíæ DB Size: ${(dbStats.dataSize / 1024 / 1024).toFixed(2)} MB`);
        
        // Verificar que no hay transacciones activas (verificaci√≥n simplificada)
        console.log(`üîí Verificaci√≥n de sesiones: OK`);
        
        return { success: true, vehiculosObjetivo };
        
    } catch (error) {
        console.error('‚ùå Error en verificaci√≥n:', error.message);
        return { success: false, error: error.message };
    }
}

// Funci√≥n para simular migraci√≥n (sin cambios reales)
async function simularMigracion(vehiculosObjetivo) {
    console.log('\nüß™ SIMULACI√ìN DE MIGRACI√ìN (SIN CAMBIOS REALES)');
    console.log('‚ïê'.repeat(80));
    
    const resultadosSimulacion = {
        vehiculosAProcesar: 0,
        polizasACrear: 0,
        actualizacionesTerminologia: 0,
        erroresPotenciales: []
    };
    
    for (const vehiculo of vehiculosObjetivo) {
        console.log(`\nüöó SIMULANDO: ${vehiculo.serie} (${vehiculo.marca} ${vehiculo.a√±o})`);
        
        try {
            // Simular verificaciones
            if (vehiculo.estado === 'SIN_POLIZA') {
                console.log('   ‚úÖ SIMULAR: Convertir veh√≠culo a CONVERTIDO_NIV');
                console.log('   ‚úÖ SIMULAR: Crear p√≥liza NIV autom√°tica');
                resultadosSimulacion.vehiculosAProcesar++;
                resultadosSimulacion.polizasACrear++;
            } else if (vehiculo.estado === 'CONVERTIDO_NIP') {
                console.log('   ‚úÖ SIMULAR: Actualizar terminolog√≠a NIP ‚Üí NIV');
                resultadosSimulacion.actualizacionesTerminologia++;
            }
            
            // Simular generaci√≥n de datos
            const datosMexicanos = generarDatosMexicanos();
            console.log(`   üìä SIMULAR: Titular generado: ${datosMexicanos.titular}`);
            console.log(`   üìä SIMULAR: RFC generado: ${datosMexicanos.rfc}`);
            
            // Verificar series duplicadas (solo problem√°tico para veh√≠culos SIN_POLIZA)
            if (vehiculo.estado === 'SIN_POLIZA') {
                const serieExiste = await Policy.findOne({ numeroPoliza: vehiculo.serie });
                if (serieExiste) {
                    resultadosSimulacion.erroresPotenciales.push({
                        vehiculo: vehiculo.serie,
                        error: 'P√≥liza con esta serie ya existe - conflicto real'
                    });
                    console.log('   ‚ö†Ô∏è  CONFLICTO REAL: Serie ya existe como p√≥liza');
                }
            } else if (vehiculo.estado === 'CONVERTIDO_NIP') {
                console.log('   ‚úÖ NORMAL: Veh√≠culo ya tiene p√≥liza (actualizaci√≥n terminol√≥gica)');
            }
            
        } catch (error) {
            resultadosSimulacion.erroresPotenciales.push({
                vehiculo: vehiculo.serie,
                error: error.message
            });
            console.log(`   ‚ùå ERROR SIMULADO: ${error.message}`);
        }
    }
    
    console.log('\nüìä RESULTADOS DE SIMULACI√ìN:');
    console.log(`   ‚Ä¢ Veh√≠culos a procesar: ${resultadosSimulacion.vehiculosAProcesar}`);
    console.log(`   ‚Ä¢ P√≥lizas a crear: ${resultadosSimulacion.polizasACrear}`);
    console.log(`   ‚Ä¢ Actualizaciones terminolog√≠a: ${resultadosSimulacion.actualizacionesTerminologia}`);
    console.log(`   ‚Ä¢ Errores potenciales: ${resultadosSimulacion.erroresPotenciales.length}`);
    
    if (resultadosSimulacion.erroresPotenciales.length > 0) {
        console.log('\n‚ö†Ô∏è  ERRORES POTENCIALES DETECTADOS:');
        resultadosSimulacion.erroresPotenciales.forEach((error, index) => {
            console.log(`   ${index + 1}. ${error.vehiculo}: ${error.error}`);
        });
    }
    
    return resultadosSimulacion;
}

// Funci√≥n para migrar un veh√≠culo individual de forma segura
async function migrarVehiculoSeguro(vehiculo, session) {
    const logPrefix = `[${vehiculo.serie}]`;
    console.log(`${logPrefix} Iniciando migraci√≥n individual`);
    
    try {
        // 1. Verificar estado actual
        const vehiculoActual = await Vehicle.findById(vehiculo._id).session(session);
        if (!vehiculoActual) {
            throw new Error('Veh√≠culo no encontrado al inicio de migraci√≥n');
        }
        
        console.log(`${logPrefix} Estado actual: ${vehiculoActual.estado}`);
        
        // 2. Determinar acciones seg√∫n estado
        let accionesRealizadas = [];
        
        if (vehiculoActual.estado === 'SIN_POLIZA') {
            // CASO 1: Veh√≠culo normal ‚Üí Convertir a NIV completo
            console.log(`${logPrefix} CASO: Conversi√≥n completa a NIV`);
            
            // Generar datos del titular
            const datosTitular = generarDatosMexicanos();
            console.log(`${logPrefix} Titular generado: ${datosTitular.titular}`);
            
            // Actualizar veh√≠culo
            await Vehicle.findByIdAndUpdate(
                vehiculoActual._id,
                {
                    estado: 'CONVERTIDO_NIV',
                    ...datosTitular,
                    updatedAt: new Date()
                },
                { session }
            );
            accionesRealizadas.push('VEHICULO_ACTUALIZADO_A_NIV');
            console.log(`${logPrefix} ‚úÖ Veh√≠culo actualizado a CONVERTIDO_NIV`);
            
            // Crear p√≥liza NIV
            const polizaNIV = {
                // Datos del titular
                titular: datosTitular.titular,
                rfc: datosTitular.rfc,
                telefono: datosTitular.telefono,
                correo: datosTitular.correo,
                
                // Direcci√≥n
                calle: datosTitular.calle,
                colonia: datosTitular.colonia,
                municipio: datosTitular.municipio,
                estadoRegion: datosTitular.estadoRegion,
                cp: datosTitular.cp,
                
                // Datos del veh√≠culo
                marca: vehiculoActual.marca,
                submarca: vehiculoActual.submarca,
                a√±o: vehiculoActual.a√±o,
                color: vehiculoActual.color,
                serie: vehiculoActual.serie,
                placas: vehiculoActual.placas || 'SIN PLACAS',
                
                // Datos de p√≥liza NIV
                numeroPoliza: vehiculoActual.serie, // NIV = Serie del veh√≠culo
                fechaEmision: new Date(),
                aseguradora: 'NIV_AUTOMATICO',
                agenteCotizador: 'SISTEMA_AUTOMATIZADO',
                
                // Arrays vac√≠os
                pagos: [],
                registros: [],
                servicios: [],
                
                // Contadores iniciales
                calificacion: 0,
                totalServicios: 0,
                servicioCounter: 0,
                registroCounter: 0,
                diasRestantesCobertura: 0,
                diasRestantesGracia: 0,
                
                // Marcadores NIV
                creadoViaOBD: true,
                esNIV: true,
                tipoPoliza: 'NIV',
                fechaConversionNIV: new Date(),
                vehicleId: vehiculoActual._id,
                
                // Estados
                estado: 'ACTIVO',
                estadoPoliza: 'VIGENTE',
                
                // Archivos vac√≠os
                archivos: {
                    fotos: [],
                    pdfs: [],
                    r2Files: {
                        fotos: [],
                        pdfs: []
                    }
                }
            };
            
            const polizaCreada = await Policy.create([polizaNIV], { session });
            accionesRealizadas.push('POLIZA_NIV_CREADA');
            console.log(`${logPrefix} ‚úÖ P√≥liza NIV creada: ${polizaCreada[0].numeroPoliza}`);
            
            // Vincular veh√≠culo con p√≥liza
            await Vehicle.findByIdAndUpdate(
                vehiculoActual._id,
                { policyId: polizaCreada[0]._id },
                { session }
            );
            accionesRealizadas.push('VEHICULO_VINCULADO_A_POLIZA');
            console.log(`${logPrefix} ‚úÖ Veh√≠culo vinculado a p√≥liza`);
            
        } else if (vehiculoActual.estado === 'CONVERTIDO_NIP') {
            // CASO 2: Actualizar terminolog√≠a NIP ‚Üí NIV
            console.log(`${logPrefix} CASO: Actualizaci√≥n terminol√≥gica NIP ‚Üí NIV`);
            
            // Actualizar estado del veh√≠culo
            await Vehicle.findByIdAndUpdate(
                vehiculoActual._id,
                {
                    estado: 'CONVERTIDO_NIV',
                    updatedAt: new Date()
                },
                { session }
            );
            accionesRealizadas.push('VEHICULO_TERMINOLOGIA_ACTUALIZADA');
            console.log(`${logPrefix} ‚úÖ Estado actualizado: CONVERTIDO_NIP ‚Üí CONVERTIDO_NIV`);
            
            // Actualizar p√≥liza asociada si existe
            if (vehiculoActual.policyId) {
                await Policy.findByIdAndUpdate(
                    vehiculoActual.policyId,
                    {
                        tipoPoliza: 'NIV',
                        esNIV: true,
                        esNIP: undefined, // Remover campo antiguo
                        fechaConversionNIV: new Date(),
                        updatedAt: new Date()
                    },
                    { session }
                );
                accionesRealizadas.push('POLIZA_TERMINOLOGIA_ACTUALIZADA');
                console.log(`${logPrefix} ‚úÖ P√≥liza actualizada: NIP ‚Üí NIV`);
            }
        }
        
        console.log(`${logPrefix} ‚úÖ Migraci√≥n completada. Acciones: ${accionesRealizadas.join(', ')}`);
        return { success: true, acciones: accionesRealizadas };
        
    } catch (error) {
        console.error(`${logPrefix} ‚ùå Error en migraci√≥n: ${error.message}`);
        throw error; // Re-lanzar para que la transacci√≥n se revierta
    }
}

// Funci√≥n principal de migraci√≥n real
async function ejecutarMigracionReal(vehiculosObjetivo) {
    console.log('\nüîÑ EJECUTANDO MIGRACI√ìN REAL');
    console.log('‚ïê'.repeat(80));
    console.log('‚ö†Ô∏è  ATENCI√ìN: Se van a realizar cambios REALES en la base de datos');
    console.log('');
    
    const resultados = {
        exitosos: 0,
        fallidos: 0,
        detalles: []
    };
    
    // Procesar veh√≠culos de uno en uno para m√°xima seguridad
    for (const vehiculo of vehiculosObjetivo) {
        const session = await mongoose.startSession();
        
        try {
            console.log(`\nüîÑ Procesando ${vehiculo.serie}...`);
            
            // Iniciar transacci√≥n
            await session.withTransaction(async () => {
                const resultado = await migrarVehiculoSeguro(vehiculo, session);
                resultados.detalles.push({
                    serie: vehiculo.serie,
                    success: true,
                    acciones: resultado.acciones
                });
            }, {
                readConcern: { level: 'majority' },
                writeConcern: { w: 'majority' },
                maxTimeMS: TIMEOUT_TRANSACCION
            });
            
            resultados.exitosos++;
            console.log(`‚úÖ ${vehiculo.serie} migrado exitosamente`);
            
            // Pausa peque√±a entre migraciones para estabilidad
            await new Promise(resolve => setTimeout(resolve, 100));
            
        } catch (error) {
            resultados.fallidos++;
            resultados.detalles.push({
                serie: vehiculo.serie,
                success: false,
                error: error.message
            });
            console.error(`‚ùå Error migrando ${vehiculo.serie}: ${error.message}`);
            
        } finally {
            await session.endSession();
        }
    }
    
    return resultados;
}

// Funci√≥n de verificaci√≥n post-migraci√≥n
async function verificacionPostMigracion() {
    console.log('\nüîç VERIFICACI√ìN POST-MIGRACI√ìN');
    console.log('-'.repeat(60));
    
    try {
        // Verificar veh√≠culos NIV
        const vehiculosNIV = await Vehicle.find({
            estado: 'CONVERTIDO_NIV'
        }).lean();
        
        console.log(`üìä Veh√≠culos CONVERTIDO_NIV: ${vehiculosNIV.length}`);
        
        // Verificar p√≥lizas NIV
        const polizasNIV = await Policy.find({
            tipoPoliza: 'NIV',
            estado: 'ACTIVO'
        }).lean();
        
        console.log(`üìä P√≥lizas NIV activas: ${polizasNIV.length}`);
        
        // Verificar integridad relacional
        let relacionesCorrectas = 0;
        for (const vehiculo of vehiculosNIV) {
            if (vehiculo.policyId) {
                const poliza = await Policy.findById(vehiculo.policyId).lean();
                if (poliza && poliza.tipoPoliza === 'NIV' && poliza.vehicleId?.toString() === vehiculo._id.toString()) {
                    relacionesCorrectas++;
                }
            }
        }
        
        console.log(`üîó Relaciones veh√≠culo-p√≥liza correctas: ${relacionesCorrectas}/${vehiculosNIV.length}`);
        
        // Verificar que el reporte ahora funcione
        const nipsDisponibles = await Policy.find({
            estado: 'ACTIVO',
            tipoPoliza: 'NIV',
            totalServicios: 0
        }).lean();
        
        console.log(`üìä NIVs disponibles para reportes: ${nipsDisponibles.length}`);
        
        return {
            vehiculosNIV: vehiculosNIV.length,
            polizasNIV: polizasNIV.length,
            relacionesCorrectas,
            nivsEnReportes: nipsDisponibles.length
        };
        
    } catch (error) {
        console.error('‚ùå Error en verificaci√≥n post-migraci√≥n:', error.message);
        return null;
    }
}

// Funci√≥n principal
async function main() {
    console.log('üõ°Ô∏è  MIGRACI√ìN SEGURA DE VEH√çCULOS A NIVs');
    console.log('‚ïê'.repeat(80));
    console.log(`üîí MODO SIMULACI√ìN: ${MODO_SIMULACION ? 'ACTIVADO' : 'DESACTIVADO'}`);
    console.log(`‚ö° VERIFICACIONES: ${VERIFICAR_CADA_PASO ? 'ACTIVADAS' : 'DESACTIVADAS'}`);
    console.log('');
    
    try {
        // 1. Conectar a DB
        const conectado = await connectDB();
        if (!conectado) {
            console.log('‚ùå No se pudo conectar a la base de datos');
            return;
        }
        
        // 2. Verificaci√≥n pre-migraci√≥n
        const verificacion = await verificacionPreMigracion();
        if (!verificacion.success) {
            console.error('‚ùå Verificaci√≥n pre-migraci√≥n fall√≥:', verificacion.error);
            return;
        }
        
        // 3. Filtrar solo veh√≠culos que necesitan migraci√≥n
        const vehiculosParaMigrar = verificacion.vehiculosObjetivo.filter(v => 
            v.estado === 'SIN_POLIZA' || v.estado === 'CONVERTIDO_NIP'
        );
        
        console.log(`üéØ Veh√≠culos que requieren migraci√≥n: ${vehiculosParaMigrar.length}`);
        
        if (vehiculosParaMigrar.length === 0) {
            console.log('‚úÖ No hay veh√≠culos que requieran migraci√≥n');
            return;
        }
        
        // 4. Simulaci√≥n obligatoria
        const simulacion = await simularMigracion(vehiculosParaMigrar);
        
        if (simulacion.erroresPotenciales.length > 0) {
            console.log('\n‚ö†Ô∏è  Se detectaron errores potenciales. Revisa antes de continuar.');
            if (!MODO_SIMULACION) {
                console.log('üö® ABORTANDO migraci√≥n real por errores detectados');
                return;
            }
        }
        
        // 5. Ejecuci√≥n real (solo si no est√° en modo simulaci√≥n)
        if (!MODO_SIMULACION) {
            console.log('\n‚ö†Ô∏è  ¬øCONTINUAR CON MIGRACI√ìN REAL? (Los cambios ser√°n permanentes)');
            console.log('   Para continuar, cambia MODO_SIMULACION = false en el c√≥digo');
            
            const resultados = await ejecutarMigracionReal(vehiculosParaMigrar);
            
            console.log('\nüìä RESULTADOS FINALES:');
            console.log(`   ‚úÖ Exitosos: ${resultados.exitosos}`);
            console.log(`   ‚ùå Fallidos: ${resultados.fallidos}`);
            
            if (resultados.fallidos > 0) {
                console.log('\n‚ùå ERRORES EN MIGRACI√ìN:');
                resultados.detalles.filter(d => !d.success).forEach(detalle => {
                    console.log(`   ‚Ä¢ ${detalle.serie}: ${detalle.error}`);
                });
            }
            
            // 6. Verificaci√≥n final
            const verificacionFinal = await verificacionPostMigracion();
            if (verificacionFinal) {
                console.log('\n‚úÖ MIGRACI√ìN COMPLETADA EXITOSAMENTE');
                console.log(`üìä ${verificacionFinal.nivsEnReportes} NIVs ahora disponibles en reportes`);
            }
            
        } else {
            console.log('\nüß™ MODO SIMULACI√ìN: No se realizaron cambios reales');
            console.log('   Para ejecutar cambios reales, cambia MODO_SIMULACION = false');
        }
        
    } catch (error) {
        console.error('‚ùå Error cr√≠tico en migraci√≥n:', error);
    } finally {
        await mongoose.connection.close();
        console.log('\nüîå Conexi√≥n cerrada');
        process.exit(0);
    }
}

main().catch(console.error);