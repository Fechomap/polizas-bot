// scripts/activatePolicies.js
// colocar archivo excel con el nombre de activaciones en la raiz de scripts

const mongoose = require('mongoose');
const XLSX = require('xlsx');
const path = require('path');
const fs = require('fs').promises;
require('dotenv').config({ path: path.resolve(__dirname, '../.env') });

// Importamos el modelo de Policy
const Policy = require('../src/models/policy');

// Funci√≥n para esperar (√∫til para pausas)
const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));

// Conectar a MongoDB
const connectDB = async () => {
    try {
        const mongoURI = process.env.MONGO_URI;
        if (!mongoURI) {
            throw new Error('La variable de entorno MONGO_URI no est√° definida');
        }

        console.log('‚úÖ Intentando conectar a MongoDB para activaci√≥n de p√≥lizas...');
        await mongoose.connect(mongoURI);
        console.log('‚úÖ Conectado a MongoDB exitosamente');
    } catch (error) {
        console.error('‚ùå Error al conectar a MongoDB:', error);
        process.exit(1);
    }
};

// Verificar si existe el archivo Excel
const checkExcelFile = async () => {
    const excelPath = path.join(__dirname, 'activaciones.xlsx');
    
    try {
        await fs.access(excelPath);
        console.log(`‚úÖ Archivo Excel encontrado: ${excelPath}`);
        return excelPath;
    } catch (error) {
        console.error('‚ùå No se encontr√≥ el archivo activaciones.xlsx en la carpeta scripts');
        process.exit(1);
    }
};

// Leer los n√∫meros de p√≥liza del archivo Excel
const readPolicyNumbers = async (excelPath) => {
    try {
        console.log('üìÑ Leyendo archivo Excel...');
        
        const workbook = XLSX.readFile(excelPath);
        const sheetName = workbook.SheetNames[0];
        const sheet = workbook.Sheets[sheetName];
        
        // Convertir a JSON
        const data = XLSX.utils.sheet_to_json(sheet, { header: 'A' });
        
        // Extraer los n√∫meros de p√≥liza (considerando que pueden estar en cualquier columna)
        const policyNumbers = [];
        
        for (const row of data) {
            // Buscar el n√∫mero de p√≥liza en cualquier columna
            for (const key in row) {
                if (row[key] && typeof row[key] === 'string') {
                    policyNumbers.push(row[key].trim().toUpperCase());
                    break; // Tomamos solo el primer valor de cada fila
                } else if (row[key] && typeof row[key] === 'number') {
                    policyNumbers.push(String(row[key]).trim());
                    break;
                }
            }
        }
        
        // Eliminar duplicados
        const uniquePolicyNumbers = [...new Set(policyNumbers)];
        
        console.log(`üìä Se encontraron ${uniquePolicyNumbers.length} n√∫meros de p√≥liza en el Excel`);
        return uniquePolicyNumbers;
    } catch (error) {
        console.error('‚ùå Error al leer el archivo Excel:', error);
        process.exit(1);
    }
};

// Activar las p√≥lizas
const activatePolicies = async (policyNumbers) => {
    console.log('üîÑ Iniciando proceso de activaci√≥n de p√≥lizas...');
    
    // Contadores para el informe final
    const results = {
        total: policyNumbers.length,
        found: 0,
        notFound: 0,
        alreadyActive: 0,
        activated: 0,
        errors: 0,
        notFoundList: [],
        errorsList: []
    };
    
    // Crear directorio para resultados
    const resultsDir = path.join(__dirname, 'resultados_activacion');
    try {
        await fs.mkdir(resultsDir, { recursive: true });
    } catch (error) {
        console.log('El directorio de resultados ya existe o no se pudo crear');
    }
    
    const totalPolicies = policyNumbers.length;
    let processedCount = 0;
    
    for (const numeroPoliza of policyNumbers) {
        processedCount++;
        console.log(`\nProcesando p√≥liza ${processedCount}/${totalPolicies}: ${numeroPoliza}`);
        
        try {
            // Buscar la p√≥liza sin filtrar por estado
            const policy = await Policy.findOne({ numeroPoliza });
            
            if (!policy) {
                console.log(`‚ùå P√≥liza no encontrada: ${numeroPoliza}`);
                results.notFound++;
                results.notFoundList.push(numeroPoliza);
                continue;
            }
            
            results.found++;
            
            // Verificar el estado actual
            if (policy.estado === 'ACTIVO') {
                console.log(`‚ÑπÔ∏è La p√≥liza ${numeroPoliza} ya est√° activa`);
                results.alreadyActive++;
                continue;
            }
            
            // Activar la p√≥liza
            policy.estado = 'ACTIVO';
            policy.fechaEliminacion = null;
            policy.motivoEliminacion = '';
            
            await policy.save();
            
            console.log(`‚úÖ P√≥liza ${numeroPoliza} activada exitosamente`);
            results.activated++;
            
            // Peque√±a pausa cada 10 p√≥lizas para no sobrecargar
            if (processedCount % 10 === 0) {
                console.log('‚è≥ Pausando brevemente para evitar sobrecarga...');
                await delay(500);
            }
        } catch (error) {
            console.error(`‚ùå Error al procesar la p√≥liza ${numeroPoliza}:`, error);
            results.errors++;
            results.errorsList.push({ numeroPoliza, error: error.message });
        }
    }
    
    return results;
};

// Generar informe de resultados
const generateReport = async (results) => {
    const timestamp = new Date().toISOString().replace(/:/g, '-').split('.')[0];
    const reportPath = path.join(__dirname, 'resultados_activacion', `reporte_activacion_${timestamp}.json`);
    const excelPath = path.join(__dirname, 'resultados_activacion', `reporte_activacion_${timestamp}.xlsx`);
    
    // Guardar reporte en JSON
    await fs.writeFile(reportPath, JSON.stringify(results, null, 2));
    
    // Crear reporte Excel
    const workbook = XLSX.utils.book_new();
    
    // Hoja de resumen
    const summaryData = [
        { M√©trica: 'Total de p√≥lizas procesadas', Valor: results.total },
        { M√©trica: 'P√≥lizas encontradas', Valor: results.found },
        { M√©trica: 'P√≥lizas no encontradas', Valor: results.notFound },
        { M√©trica: 'P√≥lizas ya activas', Valor: results.alreadyActive },
        { M√©trica: 'P√≥lizas activadas exitosamente', Valor: results.activated },
        { M√©trica: 'Errores en procesamiento', Valor: results.errors }
    ];
    
    const summarySheet = XLSX.utils.json_to_sheet(summaryData);
    XLSX.utils.book_append_sheet(workbook, summarySheet, 'Resumen');
    
    // Hoja de p√≥lizas no encontradas
    if (results.notFoundList.length > 0) {
        const notFoundData = results.notFoundList.map(num => ({ 'N√∫mero de P√≥liza': num }));
        const notFoundSheet = XLSX.utils.json_to_sheet(notFoundData);
        XLSX.utils.book_append_sheet(workbook, notFoundSheet, 'No Encontradas');
    }
    
    // Hoja de errores
    if (results.errorsList.length > 0) {
        const errorsData = results.errorsList.map(item => ({
            'N√∫mero de P√≥liza': item.numeroPoliza,
            'Error': item.error
        }));
        const errorsSheet = XLSX.utils.json_to_sheet(errorsData);
        XLSX.utils.book_append_sheet(workbook, errorsSheet, 'Errores');
    }
    
    // Guardar Excel
    XLSX.writeFile(workbook, excelPath);
    
    return {
        jsonReport: reportPath,
        excelReport: excelPath
    };
};

// Funci√≥n principal
const run = async () => {
    try {
        console.log('üöÄ Iniciando proceso de activaci√≥n de p√≥lizas desde Excel');
        
        // Conectar a la base de datos
        await connectDB();
        
        // Verificar y leer el archivo Excel
        const excelPath = await checkExcelFile();
        const policyNumbers = await readPolicyNumbers(excelPath);
        
        if (policyNumbers.length === 0) {
            console.log('‚ö†Ô∏è No se encontraron n√∫meros de p√≥liza en el archivo Excel');
            process.exit(0);
        }
        
        // Confirmar antes de proceder
        console.log(`\n‚ö†Ô∏è Se van a procesar ${policyNumbers.length} p√≥lizas para activaci√≥n.`);
        console.log('üîÑ Iniciando en 5 segundos... (Ctrl+C para cancelar)');
        await delay(5000);
        
        // Activar las p√≥lizas
        const results = await activatePolicies(policyNumbers);
        
        // Generar y guardar informe
        const reports = await generateReport(results);
        
        // Resumen final
        console.log('\n‚úÖ Proceso completado');
        console.log('üìä Resumen:');
        console.log(`   - Total de p√≥lizas procesadas: ${results.total}`);
        console.log(`   - P√≥lizas encontradas: ${results.found}`);
        console.log(`   - P√≥lizas no encontradas: ${results.notFound}`);
        console.log(`   - P√≥lizas ya activas: ${results.alreadyActive}`);
        console.log(`   - P√≥lizas activadas exitosamente: ${results.activated}`);
        console.log(`   - Errores en procesamiento: ${results.errors}`);
        console.log(`\nüìÑ Reporte guardado en:`);
        console.log(`   - JSON: ${reports.jsonReport}`);
        console.log(`   - Excel: ${reports.excelReport}`);
        
        // Cerrar conexi√≥n a MongoDB
        await mongoose.connection.close();
        console.log('\nüëã Conexi√≥n a MongoDB cerrada');
        
        process.exit(0);
    } catch (error) {
        console.error('‚ùå Error en el proceso:', error);
        
        // Intentar cerrar conexi√≥n a MongoDB
        try {
            await mongoose.connection.close();
            console.log('üëã Conexi√≥n a MongoDB cerrada');
        } catch (e) {
            // Ignorar error si ya est√° cerrada
        }
        
        process.exit(1);
    }
};

// Ejecutar
run();