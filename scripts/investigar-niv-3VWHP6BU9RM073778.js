/**
 * Script de investigaci√≥n: Consultar estado del veh√≠culo/NIP 3VWHP6BU9RM073778
 * Determina el estado actual en ambas colecciones (Vehicle y Policy)
 */

const { connectDB } = require('../src/database');
const Vehicle = require('../src/models/vehicle').default;
const Policy = require('../src/models/policy').default;

const SERIE_INVESTIGAR = '3VWHP6BU9RM073778';

async function investigarNIV() {
    console.log('üîç INICIANDO INVESTIGACI√ìN DEL NIV:', SERIE_INVESTIGAR);
    console.log('‚ïê'.repeat(80));

    try {
        // Conectar a la base de datos
        await connectDB();
        console.log('‚úÖ Conectado a MongoDB');

        // 1. BUSCAR EN COLECCI√ìN VEHICLE
        console.log('\nüìã 1. INVESTIGANDO COLECCI√ìN VEHICLE:');
        console.log('-'.repeat(50));

        const vehiculos = await Vehicle.find({
            serie: SERIE_INVESTIGAR
        }).lean();

        if (vehiculos.length === 0) {
            console.log('‚ùå NO encontrado en colecci√≥n Vehicle');
        } else {
            console.log(`‚úÖ Encontrados ${vehiculos.length} registro(s) en Vehicle:`);
            vehiculos.forEach((v, index) => {
                console.log(`\n   üìÑ Registro ${index + 1}:`);
                console.log(`   ‚Ä¢ _id: ${v._id}`);
                console.log(`   ‚Ä¢ Serie: ${v.serie}`);
                console.log(`   ‚Ä¢ Marca: ${v.marca} ${v.submarca}`);
                console.log(`   ‚Ä¢ A√±o: ${v.a√±o}`);
                console.log(`   ‚Ä¢ Estado: ${v.estado}`);
                console.log(`   ‚Ä¢ PolicyId: ${v.policyId || 'null'}`);
                console.log(`   ‚Ä¢ CreadoPor: ${v.creadoPor}`);
                console.log(`   ‚Ä¢ CreadoVia: ${v.creadoVia}`);
                console.log(`   ‚Ä¢ FechaCreaci√≥n: ${v.createdAt}`);
                console.log(`   ‚Ä¢ Fotos R2: ${v.archivos?.r2Files?.fotos?.length || 0}`);
            });
        }

        // 2. BUSCAR EN COLECCI√ìN POLICY
        console.log('\nüìã 2. INVESTIGANDO COLECCI√ìN POLICY:');
        console.log('-'.repeat(50));

        const polizas = await Policy.find({
            numeroPoliza: SERIE_INVESTIGAR
        }).lean();

        if (polizas.length === 0) {
            console.log('‚ùå NO encontrado en colecci√≥n Policy');
        } else {
            console.log(`‚úÖ Encontrados ${polizas.length} registro(s) en Policy:`);
            polizas.forEach((p, index) => {
                console.log(`\n   üìÑ P√≥liza ${index + 1}:`);
                console.log(`   ‚Ä¢ _id: ${p._id}`);
                console.log(`   ‚Ä¢ NumeroPoliza: ${p.numeroPoliza}`);
                console.log(`   ‚Ä¢ TipoPoliza: ${p.tipoPoliza || 'REGULAR'}`);
                console.log(`   ‚Ä¢ EsNIP: ${p.esNIP || false}`);
                console.log(`   ‚Ä¢ Estado: ${p.estado}`);
                console.log(`   ‚Ä¢ Titular: ${p.titular}`);
                console.log(`   ‚Ä¢ VehicleId: ${p.vehicleId || 'null'}`);
                console.log(`   ‚Ä¢ TotalServicios: ${p.totalServicios || 0}`);
                console.log(`   ‚Ä¢ CreadoViaOBD: ${p.creadoViaOBD || false}`);
                console.log(`   ‚Ä¢ FechaEmision: ${p.fechaEmision}`);
                console.log(`   ‚Ä¢ FechaConversionNIP: ${p.fechaConversionNIP || 'null'}`);
                console.log(`   ‚Ä¢ Aseguradora: ${p.aseguradora}`);
                console.log(`   ‚Ä¢ FechaCreaci√≥n: ${p.createdAt}`);
            });
        }

        // 3. BUSCAR POSIBLES CONFLICTOS
        console.log('\nüìã 3. INVESTIGANDO POSIBLES CONFLICTOS:');
        console.log('-'.repeat(50));

        // Buscar series similares
        const seriesSimilares = await Vehicle.find({
            serie: { $regex: SERIE_INVESTIGAR.substring(0, 10), $options: 'i' }
        }).lean();

        if (seriesSimilares.length > 1) {
            console.log(`‚ö†Ô∏è  Encontradas ${seriesSimilares.length} series similares:`);
            seriesSimilares.forEach(v => {
                console.log(`   ‚Ä¢ ${v.serie} - Estado: ${v.estado} - A√±o: ${v.a√±o}`);
            });
        } else {
            console.log('‚úÖ No hay series similares que puedan causar conflicto');
        }

        // 4. VERIFICAR QUERY DE REPORTES
        console.log('\nüìã 4. SIMULANDO QUERY DE REPORTES NIPs:');
        console.log('-'.repeat(50));

        const nipsEnReportes = await Policy.find({
            estado: 'ACTIVO',
            tipoPoliza: 'NIP',
            totalServicios: 0
        })
            .sort({ createdAt: -1 })
            .limit(4)
            .lean();

        console.log(`Query NIPs para reportes devuelve: ${nipsEnReportes.length} resultados`);
        if (nipsEnReportes.length > 0) {
            nipsEnReportes.forEach((nip, index) => {
                console.log(`   ${index + 1}. ${nip.numeroPoliza} - Estado: ${nip.estado} - Servicios: ${nip.totalServicios}`);
            });
        }

        // Buscar espec√≠ficamente nuestro NIP
        const nuestroNipEnQuery = nipsEnReportes.find(n => n.numeroPoliza === SERIE_INVESTIGAR);
        if (nuestroNipEnQuery) {
            console.log(`‚úÖ El NIP ${SERIE_INVESTIGAR} S√ç aparece en query de reportes`);
        } else {
            console.log(`‚ùå El NIP ${SERIE_INVESTIGAR} NO aparece en query de reportes`);
        }

        // 5. RESUMEN DE INVESTIGACI√ìN
        console.log('\nüìã 5. RESUMEN DE INVESTIGACI√ìN:');
        console.log('‚ïê'.repeat(80));

        const vehiculoEncontrado = vehiculos.length > 0;
        const polizaEncontrada = polizas.length > 0;

        console.log(`‚Ä¢ Veh√≠culo en BD: ${vehiculoEncontrado ? '‚úÖ S√ç' : '‚ùå NO'}`);
        console.log(`‚Ä¢ P√≥liza en BD: ${polizaEncontrada ? '‚úÖ S√ç' : '‚ùå NO'}`);

        if (vehiculoEncontrado && polizaEncontrada) {
            const vehiculo = vehiculos[0];
            const poliza = polizas[0];

            console.log(`‚Ä¢ Vinculaci√≥n V‚ÜíP: ${vehiculo.policyId?.toString() === poliza._id.toString() ? '‚úÖ CORRECTA' : '‚ùå INCORRECTA'}`);
            console.log(`‚Ä¢ Vinculaci√≥n P‚ÜíV: ${poliza.vehicleId?.toString() === vehiculo._id.toString() ? '‚úÖ CORRECTA' : '‚ùå INCORRECTA'}`);
            console.log(`‚Ä¢ Tipo conversi√≥n: ${poliza.tipoPoliza === 'NIP' ? '‚úÖ NIP' : '‚ùå REGULAR'}`);
            console.log(`‚Ä¢ Estado veh√≠culo: ${vehiculo.estado}`);
            console.log(`‚Ä¢ Estado p√≥liza: ${poliza.estado}`);
        }

        console.log('\nüéØ CONCLUSI√ìN:');
        if (!vehiculoEncontrado && !polizaEncontrada) {
            console.log('‚ùå FALLO TOTAL: No se cre√≥ ni veh√≠culo ni p√≥liza');
        } else if (vehiculoEncontrado && !polizaEncontrada) {
            console.log('‚ö†Ô∏è  FALLO PARCIAL: Se cre√≥ veh√≠culo pero no p√≥liza NIP');
        } else if (!vehiculoEncontrado && polizaEncontrada) {
            console.log('‚ö†Ô∏è  FALLO PARCIAL: Se cre√≥ p√≥liza NIP pero no veh√≠culo');
        } else {
            console.log('‚úÖ CREACI√ìN EXITOSA: Ambos registros existen');
        }

    } catch (error) {
        console.error('‚ùå Error en investigaci√≥n:', error);
    } finally {
        process.exit(0);
    }
}

// Ejecutar investigaci√≥n
investigarNIV().catch(console.error);
