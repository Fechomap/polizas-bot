// scripts/investigar-niv-LMWDT1G89P1141436.js
// Script para investigar el estado del NIV LMWDT1G89P1141436
require('dotenv').config();
const mongoose = require('mongoose');

const SERIE_INVESTIGAR = 'LMWDT1G89P1141436';

// Esquemas flexibles
const VehicleSchema = new mongoose.Schema({}, { strict: false });
const PolicySchema = new mongoose.Schema({}, { strict: false });
const Vehicle = mongoose.model('Vehicle', VehicleSchema);
const Policy = mongoose.model('Policy', PolicySchema);

const connectDB = async () => {
    try {
        const mongoURI = process.env.MONGO_URI;
        if (!mongoURI) {
            console.log('‚ùå MONGO_URI no est√° definida');
            return false;
        }
        await mongoose.connect(mongoURI);
        console.log('‚úÖ Conectado a MongoDB exitosamente');
        return true;
    } catch (error) {
        console.error('‚ùå Error al conectar a MongoDB:', error.message);
        return false;
    }
};

async function investigarNIVDodge() {
    console.log('üîç INVESTIGANDO NIV DODGE JOURNEY 2023:', SERIE_INVESTIGAR);
    console.log('‚ïê'.repeat(80));
    console.log('üìÖ Logs indican proceso iniciado: 14:57:20 - 14:59:33 (2m 13s)');
    console.log('üöó Veh√≠culo: Dodge Journey 2023 - Color: Naranja - Placas: RCJ039D');
    console.log('');

    try {
        const conectado = await connectDB();
        if (!conectado) {
            console.log('‚ùå No se pudo conectar a la base de datos');
            return;
        }

        console.log('üìã 1. AN√ÅLISIS DE LOGS RECIBIDOS:');
        console.log('-'.repeat(50));
        console.log('‚è∞ Proceso iniciado: 2025-07-21T20:57:20.204Z');
        console.log('üî§ Placas ingresadas: RCJ039D a las 14:58:19');
        console.log('üì∏ Foto subida exitosamente: 14:58:44 (tama√±o: 268KB)');
        console.log('üîò Bot√≥n "Finalizar" presionado: 14:59:33');
        console.log('‚ùå LOGS SE CORTAN AQU√ç - Proceso incompleto\n');

        console.log('üìã 2. ESTADO ACTUAL EN BASE DE DATOS:');
        console.log('-'.repeat(50));

        // Buscar veh√≠culo
        const vehiculos = await Vehicle.find({
            serie: SERIE_INVESTIGAR
        }).lean();

        if (vehiculos.length === 0) {
            console.log('‚ùå NO encontrado en colecci√≥n Vehicle');
        } else {
            console.log(`‚úÖ Encontrados ${vehiculos.length} veh√≠culo(s):`);
            vehiculos.forEach((v, index) => {
                console.log(`\n   üìÑ Veh√≠culo ${index + 1}:`);
                console.log(`   ‚Ä¢ _id: ${v._id}`);
                console.log(`   ‚Ä¢ Serie: ${v.serie}`);
                console.log(`   ‚Ä¢ Marca: ${v.marca} ${v.submarca} ${v.a√±o}`);
                console.log(`   ‚Ä¢ Color: ${v.color}`);
                console.log(`   ‚Ä¢ Placas: ${v.placas}`);
                console.log(`   ‚Ä¢ Estado: ${v.estado}`);
                console.log(`   ‚Ä¢ PolicyId: ${v.policyId || 'null'}`);
                console.log(`   ‚Ä¢ CreadoPor: ${v.creadoPor}`);
                console.log(`   ‚Ä¢ FechaCreaci√≥n: ${v.createdAt}`);

                // Verificar fotos
                if (v.archivos?.r2Files?.fotos) {
                    console.log(`   ‚Ä¢ Fotos R2: ${v.archivos.r2Files.fotos.length}`);
                    v.archivos.r2Files.fotos.forEach((foto, idx) => {
                        console.log(`     ${idx + 1}. ${foto.originalName} (${foto.size} bytes)`);
                    });
                }
            });
        }

        // Buscar p√≥liza
        console.log('\nüìã 3. B√öSQUEDA DE P√ìLIZA NIV:');
        console.log('-'.repeat(50));

        const polizas = await Policy.find({
            numeroPoliza: SERIE_INVESTIGAR
        }).lean();

        if (polizas.length === 0) {
            console.log('‚ùå NO encontrado en colecci√≥n Policy');
        } else {
            console.log(`‚úÖ Encontradas ${polizas.length} p√≥liza(s):`);
            polizas.forEach((p, index) => {
                console.log(`\n   üìÑ P√≥liza ${index + 1}:`);
                console.log(`   ‚Ä¢ _id: ${p._id}`);
                console.log(`   ‚Ä¢ NumeroPoliza: ${p.numeroPoliza}`);
                console.log(`   ‚Ä¢ TipoPoliza: ${p.tipoPoliza || 'REGULAR'}`);
                console.log(`   ‚Ä¢ EsNIV: ${p.esNIV || false}`);
                console.log(`   ‚Ä¢ Estado: ${p.estado}`);
                console.log(`   ‚Ä¢ VehicleId: ${p.vehicleId || 'null'}`);
                console.log(`   ‚Ä¢ TotalServicios: ${p.totalServicios || 0}`);
                console.log(`   ‚Ä¢ FechaConversionNIV: ${p.fechaConversionNIV || 'null'}`);
                console.log(`   ‚Ä¢ FechaCreaci√≥n: ${p.createdAt}`);
            });
        }

        console.log('\nüìã 4. AN√ÅLISIS DE DETECCI√ìN NIV:');
        console.log('-'.repeat(50));

        const a√±oVehiculo = 2023;
        const esVehiculoNIV = a√±oVehiculo >= 2023 && a√±oVehiculo <= 2026;

        console.log(`‚Ä¢ A√±o del veh√≠culo: ${a√±oVehiculo}`);
        console.log(`‚Ä¢ ¬øEs candidato NIV?: ${esVehiculoNIV ? '‚úÖ S√ç' : '‚ùå NO'}`);
        console.log('‚Ä¢ Rango NIV: 2023-2026');

        if (esVehiculoNIV) {
            console.log('‚úÖ Este veh√≠culo DEBE haberse convertido a NIV autom√°ticamente');
        }

        console.log('\nüìã 5. VERIFICACI√ìN DE CORRECCIONES APLICADAS:');
        console.log('-'.repeat(50));

        // Verificar si existen veh√≠culos hu√©rfanos recientes
        const vehiculosHuerfanos = await Vehicle.find({
            createdAt: { $gte: new Date('2025-07-21T20:50:00.000Z') },
            estado: { $in: ['SIN_POLIZA'] },
            a√±o: { $gte: 2023, $lte: 2026 }
        }).lean();

        if (vehiculosHuerfanos.length > 0) {
            console.log(`‚ö†Ô∏è  Encontrados ${vehiculosHuerfanos.length} veh√≠culos NIV hu√©rfanos recientes:`);
            vehiculosHuerfanos.forEach(v => {
                console.log(`   ‚Ä¢ ${v.serie} - ${v.marca} ${v.a√±o} - Estado: ${v.estado}`);
            });
        } else {
            console.log('‚úÖ No hay veh√≠culos NIV hu√©rfanos recientes');
        }

        console.log('\nüìã 6. QUERY DE REPORTES NIV:');
        console.log('-'.repeat(50));

        const nivsDisponibles = await Policy.find({
            estado: 'ACTIVO',
            tipoPoliza: 'NIV',
            totalServicios: 0
        })
            .sort({ createdAt: -1 })
            .limit(4)
            .lean();

        console.log(`üìä NIVs disponibles para reportes: ${nivsDisponibles.length}`);
        if (nivsDisponibles.length > 0) {
            nivsDisponibles.forEach((niv, index) => {
                console.log(`   ${index + 1}. ${niv.numeroPoliza} - ${niv.marca} ${niv.a√±o}`);
            });

            const nuestroNIV = nivsDisponibles.find(n => n.numeroPoliza === SERIE_INVESTIGAR);
            if (nuestroNIV) {
                console.log(`‚úÖ El NIV ${SERIE_INVESTIGAR} aparece en reportes`);
            } else {
                console.log(`‚ùå El NIV ${SERIE_INVESTIGAR} NO aparece en reportes`);
            }
        }

        console.log('\nüìã 7. DIAGN√ìSTICO FINAL:');
        console.log('‚ïê'.repeat(80));

        const vehiculoEncontrado = vehiculos.length > 0;
        const polizaEncontrada = polizas.length > 0;

        if (!vehiculoEncontrado && !polizaEncontrada) {
            console.log('‚ùå FALLO TOTAL: No se cre√≥ nada');
            console.log('üîç Causa probable: Error antes de iniciar transacci√≥n');
        } else if (vehiculoEncontrado && !polizaEncontrada) {
            const vehiculo = vehiculos[0];
            console.log('‚ö†Ô∏è  FALLO EN CONVERSI√ìN NIV: Solo se cre√≥ veh√≠culo');
            console.log(`üîç Estado veh√≠culo: ${vehiculo.estado}`);
            console.log('üîç Causa probable: Fall√≥ la conversi√≥n NIV o se ejecut√≥ flujo regular');
        } else if (!vehiculoEncontrado && polizaEncontrada) {
            console.log('üö® INCONSISTENCIA CR√çTICA: P√≥liza sin veh√≠culo');
        } else {
            const vehiculo = vehiculos[0];
            const poliza = polizas[0];
            console.log('‚úÖ CREACI√ìN EXITOSA: Ambos registros existen');

            const vinculacionCorrecta = vehiculo.policyId?.toString() === poliza._id.toString() &&
                                       poliza.vehicleId?.toString() === vehiculo._id.toString();

            console.log(`üîó Vinculaci√≥n: ${vinculacionCorrecta ? '‚úÖ CORRECTA' : '‚ùå INCORRECTA'}`);

            if (poliza.tipoPoliza === 'NIV' && vehiculo.estado === 'CONVERTIDO_NIV') {
                console.log('üéâ CONVERSI√ìN NIV: ‚úÖ EXITOSA');
            } else {
                console.log('‚ö†Ô∏è  CONVERSI√ìN NIV: ‚ùå INCOMPLETA O FALLIDA');
            }
        }

        console.log('\nüéØ RECOMENDACIONES:');
        if (!polizaEncontrada && vehiculoEncontrado) {
            console.log('1. üîÑ Reejecutar conversi√≥n NIV para este veh√≠culo');
            console.log('2. üîç Revisar logs completos del callback "vehiculo_finalizar"');
            console.log('3. ‚ö†Ô∏è  Verificar que las correcciones se aplicaron correctamente');
        }

    } catch (error) {
        console.error('‚ùå Error en investigaci√≥n:', error);
    } finally {
        await mongoose.connection.close();
        console.log('\nüîå Conexi√≥n cerrada');
        process.exit(0);
    }
}

investigarNIVDodge().catch(console.error);
