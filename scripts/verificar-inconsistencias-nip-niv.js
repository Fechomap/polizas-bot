// scripts/verificar-inconsistencias-nip-niv.js
// Verificar inconsistencias en la terminolog√≠a NIP vs NIV
require('dotenv').config();
const mongoose = require('mongoose');

// Esquemas flexibles para investigaci√≥n
const PolicySchema = new mongoose.Schema({}, { strict: false });
const VehicleSchema = new mongoose.Schema({}, { strict: false });
const Policy = mongoose.model('Policy', PolicySchema);
const Vehicle = mongoose.model('Vehicle', VehicleSchema);

const connectDB = async () => {
    try {
        const mongoURI = process.env.MONGO_URI;
        if (!mongoURI) {
            console.log('‚ùå MONGO_URI no est√° definida');
            return false;
        }
        await mongoose.connect(mongoURI);
        console.log('‚úÖ Conectado a MongoDB exitosamente');
        return true;
    } catch (error) {
        console.error('‚ùå Error al conectar a MongoDB:', error.message);
        return false;
    }
};

async function verificarInconsistencias() {
    console.log('üîç VERIFICACI√ìN DE INCONSISTENCIAS NIP vs NIV');
    console.log('‚ïê'.repeat(80));
    console.log('üéØ Objetivo: Identificar registros con terminolog√≠a mixta o incorrecta');
    console.log('');

    try {
        const conectado = await connectDB();
        if (!conectado) {
            console.log('‚ùå No se pudo conectar a la base de datos');
            return;
        }

        console.log('üìã 1. AN√ÅLISIS DE P√ìLIZAS:');
        console.log('-'.repeat(60));
        
        // Buscar p√≥lizas con tipoPoliza = 'NIP' (terminolog√≠a antigua)
        const polizasNIP = await Policy.find({
            tipoPoliza: 'NIP'
        }).lean();

        // Buscar p√≥lizas con tipoPoliza = 'NIV' (terminolog√≠a nueva)
        const polizasNIV = await Policy.find({
            tipoPoliza: 'NIV'
        }).lean();

        // Buscar p√≥lizas con esNIP = true (campo antiguo)
        const polizasEsNIP = await Policy.find({
            esNIP: true
        }).lean();

        // Buscar p√≥lizas con esNIV = true (campo nuevo)
        const polizasEsNIV = await Policy.find({
            esNIV: true
        }).lean();

        console.log(`üìä RESUMEN P√ìLIZAS:`);
        console.log(`   ‚Ä¢ tipoPoliza: 'NIP' (antiguo): ${polizasNIP.length}`);
        console.log(`   ‚Ä¢ tipoPoliza: 'NIV' (nuevo): ${polizasNIV.length}`);
        console.log(`   ‚Ä¢ esNIP: true (antiguo): ${polizasEsNIP.length}`);
        console.log(`   ‚Ä¢ esNIV: true (nuevo): ${polizasEsNIV.length}`);

        if (polizasNIP.length > 0) {
            console.log(`\nüö® P√ìLIZAS CON TERMINOLOG√çA ANTIGUA (tipoPoliza: 'NIP'):`);
            polizasNIP.forEach((pol, index) => {
                console.log(`   ${index + 1}. ${pol.numeroPoliza}`);
                console.log(`      ‚Ä¢ Estado: ${pol.estado}`);
                console.log(`      ‚Ä¢ TipoPoliza: ${pol.tipoPoliza}`);
                console.log(`      ‚Ä¢ esNIP: ${pol.esNIP}`);
                console.log(`      ‚Ä¢ esNIV: ${pol.esNIV}`);
                console.log(`      ‚Ä¢ TotalServicios: ${pol.totalServicios}`);
                console.log(`      ‚Ä¢ Creado: ${pol.createdAt}`);
                console.log(`      ‚Ä¢ Actualizado: ${pol.updatedAt}`);
            });
        }

        console.log('\nüìã 2. AN√ÅLISIS DE VEH√çCULOS:');
        console.log('-'.repeat(60));
        
        // Buscar veh√≠culos con estado CONVERTIDO_NIP (terminolog√≠a antigua)
        const vehiculosNIP = await Vehicle.find({
            estado: 'CONVERTIDO_NIP'
        }).lean();

        // Buscar veh√≠culos con estado CONVERTIDO_NIV (terminolog√≠a nueva)
        const vehiculosNIV = await Vehicle.find({
            estado: 'CONVERTIDO_NIV'
        }).lean();

        console.log(`üìä RESUMEN VEH√çCULOS:`);
        console.log(`   ‚Ä¢ estado: 'CONVERTIDO_NIP' (antiguo): ${vehiculosNIP.length}`);
        console.log(`   ‚Ä¢ estado: 'CONVERTIDO_NIV' (nuevo): ${vehiculosNIV.length}`);

        if (vehiculosNIP.length > 0) {
            console.log(`\nüö® VEH√çCULOS CON TERMINOLOG√çA ANTIGUA (estado: 'CONVERTIDO_NIP'):`);
            vehiculosNIP.forEach((veh, index) => {
                console.log(`   ${index + 1}. ${veh.serie}`);
                console.log(`      ‚Ä¢ Estado: ${veh.estado}`);
                console.log(`      ‚Ä¢ Marca: ${veh.marca} ${veh.submarca} ${veh.a√±o}`);
                console.log(`      ‚Ä¢ PolicyId: ${veh.policyId}`);
                console.log(`      ‚Ä¢ Creado: ${veh.createdAt}`);
                console.log(`      ‚Ä¢ Actualizado: ${veh.updatedAt}`);
            });
        }

        console.log('\nüìã 3. VERIFICACI√ìN DE INTEGRIDAD RELACIONAL:');
        console.log('-'.repeat(60));
        
        // Verificar relaciones inconsistentes entre Policy y Vehicle
        console.log('üîç Buscando inconsistencias relacionales...');
        
        let inconsistenciasEncontradas = 0;

        for (const polNIP of polizasNIP) {
            if (polNIP.vehicleId) {
                const vehiculoAsociado = await Vehicle.findById(polNIP.vehicleId).lean();
                if (vehiculoAsociado) {
                    const estadoVehiculo = vehiculoAsociado.estado;
                    if (estadoVehiculo === 'CONVERTIDO_NIV') {
                        inconsistenciasEncontradas++;
                        console.log(`üö® INCONSISTENCIA ${inconsistenciasEncontradas}:`);
                        console.log(`   P√≥liza ${polNIP.numeroPoliza} es tipoPoliza: 'NIP'`);
                        console.log(`   Pero su veh√≠culo ${vehiculoAsociado.serie} tiene estado: 'CONVERTIDO_NIV'`);
                        console.log(`   Esta es una inconsistencia terminol√≥gica`);
                    } else if (estadoVehiculo !== 'CONVERTIDO_NIP') {
                        inconsistenciasEncontradas++;
                        console.log(`üö® INCONSISTENCIA ${inconsistenciasEncontradas}:`);
                        console.log(`   P√≥liza ${polNIP.numeroPoliza} es tipoPoliza: 'NIP'`);
                        console.log(`   Pero su veh√≠culo ${vehiculoAsociado.serie} tiene estado: '${estadoVehiculo}'`);
                        console.log(`   Esperar√≠amos 'CONVERTIDO_NIP' o 'CONVERTIDO_NIV'`);
                    }
                }
            }
        }

        if (inconsistenciasEncontradas === 0) {
            console.log('‚úÖ No se encontraron inconsistencias relacionales');
        }

        console.log('\nüìã 4. AN√ÅLISIS DE FECHAS DE ACTUALIZACI√ìN:');
        console.log('-'.repeat(60));
        
        // Verificar cu√°ndo fueron actualizados estos registros con terminolog√≠a antigua
        const hoy = new Date();
        hoy.setHours(0, 0, 0, 0);
        
        const polizasNIPActualizadasHoy = polizasNIP.filter(pol => 
            pol.updatedAt && pol.updatedAt >= hoy
        );

        console.log(`üìä P√≥lizas NIP actualizadas hoy: ${polizasNIPActualizadasHoy.length}/${polizasNIP.length}`);
        
        if (polizasNIPActualizadasHoy.length > 0) {
            console.log('\nüïí ACTUALIZACIONES RECIENTES:');
            polizasNIPActualizadasHoy.forEach((pol, index) => {
                console.log(`   ${index + 1}. ${pol.numeroPoliza} - ${pol.updatedAt}`);
            });
        }

        console.log('\nüìã 5. DIAGN√ìSTICO Y RECOMENDACIONES:');
        console.log('‚ïê'.repeat(80));
        
        if (polizasNIP.length > 0 || vehiculosNIP.length > 0) {
            console.log('üö® TERMINOLOG√çA MIXTA DETECTADA');
            console.log('\nüìä SITUACI√ìN ACTUAL:');
            console.log(`   ‚Ä¢ ${polizasNIP.length} p√≥lizas usan terminolog√≠a antigua ('NIP')`);
            console.log(`   ‚Ä¢ ${polizasNIV.length} p√≥lizas usan terminolog√≠a nueva ('NIV')`);
            console.log(`   ‚Ä¢ ${vehiculosNIP.length} veh√≠culos usan terminolog√≠a antigua`);
            console.log(`   ‚Ä¢ ${vehiculosNIV.length} veh√≠culos usan terminolog√≠a nueva`);
            
            console.log('\nüéØ IMPACTO EN REPORTES:');
            console.log('   ‚Ä¢ Los reportes buscan tipoPoliza: "NIV" pero algunos registros son "NIP"');
            console.log('   ‚Ä¢ Esto causa que NIPs v√°lidos no aparezcan en reportes');
            console.log('   ‚Ä¢ La funcionalidad est√° fragmentada entre dos terminolog√≠as');
            
            console.log('\nüí° RECOMENDACIONES:');
            console.log('   1. üîÑ Migrar todos los registros NIP ‚Üí NIV para consistencia');
            console.log('   2. üß™ Crear script de migraci√≥n de datos');
            console.log('   3. ‚úÖ Verificar integridad post-migraci√≥n');
            console.log('   4. üìä Actualizar queries para manejar ambos temporalmente');
            
        } else {
            console.log('‚úÖ TERMINOLOG√çA CONSISTENTE');
            console.log('   Todos los registros usan la nueva terminolog√≠a NIV correctamente');
        }

        // Verificar el caso espec√≠fico de Journey
        const journeyNIP = polizasNIP.find(p => p.numeroPoliza === 'LMWDT1G89P1141436');
        if (journeyNIP) {
            console.log('\nüéØ CASO ESPEC√çFICO - JOURNEY:');
            console.log(`   ‚Ä¢ La p√≥liza Journey est√° marcada como tipoPoliza: 'NIP'`);
            console.log(`   ‚Ä¢ Pero nuestros reportes buscan tipoPoliza: 'NIV'`);
            console.log(`   ‚Ä¢ Esta es la causa exacta del fallo reportado entre 15:01 y 15:08`);
            console.log(`   ‚Ä¢ Actualizado por √∫ltima vez: ${journeyNIP.updatedAt}`);
        }

    } catch (error) {
        console.error('‚ùå Error en verificaci√≥n:', error);
    } finally {
        await mongoose.connection.close();
        console.log('\nüîå Conexi√≥n cerrada');
        process.exit(0);
    }
}

verificarInconsistencias().catch(console.error);